{"ast":null,"code":"import { USER_AUTH_REQUEST, USER_AUTH_SUCCESS, USER_AUTH_FAILURE, USER_LOGOUT, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAILURE, USER_CHANGED_NAME, REMOVE_UPDATED_USER, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAILURE, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAILURE, USER_UPDATE_BYADMIN_REQUEST, USER_UPDATE_BYADMIN_SUCCESS, USER_UPDATE_BYADMIN_FAILURE } from '../actions/userActions';\nimport { sendRequest } from '../../helpers';\nimport { removeAllShippingAddresses } from './shippingActionCreators';\nimport { removeAllPaymentMethods } from './paymentActionCreators';\nimport { removeSelectedShipping, removeSelectedPayment } from './checkoutActionCreators';\nimport { clearCart } from './cartActionCreators';\n\nconst updateLocalStorage = (user, userType) => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n\n    if (user) {\n      return localStorage.setItem('shoppingapp', JSON.stringify({ ...shoppingapp,\n        [userType]: user\n      }));\n    }\n\n    delete shoppingapp[userType];\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n\n  if (user) {\n    localStorage.setItem('shoppingapp', JSON.stringify({\n      [userType]: user\n    }));\n  }\n};\n\nexport const authenticateUser = (loginInfo, operation) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_AUTH_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/users/${operation}`, 'POST', {\n      'Content-Type': 'application/json'\n    }, JSON.stringify(loginInfo));\n\n    if (error) {\n      return dispatch({\n        type: USER_AUTH_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: USER_AUTH_SUCCESS,\n      payload: data\n    });\n    updateLocalStorage(getState().userAuth.loggedInUser, 'loggedInUser');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const logoutUser = () => (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LOGOUT\n    });\n    dispatch({\n      type: REMOVE_UPDATED_USER\n    });\n    updateLocalStorage(getState().userAuth.loggedInUser, 'loggedInUser');\n    updateLocalStorage(getState().userUpdate.updatedUser, 'updatedUser');\n    dispatch(removeAllShippingAddresses());\n    dispatch(removeAllPaymentMethods());\n    dispatch(removeSelectedShipping());\n    dispatch(removeSelectedPayment());\n    dispatch(clearCart());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateUser = (userId, token, updateInfo, onSuccess = () => {}) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/users/${userId}`, 'PATCH', {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }, JSON.stringify(updateInfo));\n\n    if (error) {\n      return dispatch({\n        type: USER_UPDATE_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    }); //updateLocalStorage(getState().userUpdate.updatedUser, 'updatedUser');\n\n    onSuccess();\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const userChangedName = name => (dispatch, getState) => {\n  dispatch({\n    type: USER_CHANGED_NAME,\n    payload: name\n  });\n  updateLocalStorage(getState().userAuth.loggedInUser, 'loggedInUser');\n};\nexport const listUsers = (token, searchTerm = '', page = '', perPage = '') => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/users?userId=${searchTerm}&page=${page}&perPage=${perPage}`, 'GET', {\n      Authorization: `Bearer ${token}`\n    });\n\n    if (error) {\n      return dispatch({\n        type: USER_LIST_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteUser = (userId, token, onSuccess) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/users/${userId}`, 'DELETE', {\n      Authorization: `Bearer ${token}`\n    });\n\n    if (error) {\n      return dispatch({\n        type: USER_DELETE_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: USER_DELETE_SUCCESS,\n      payload: data\n    });\n    onSuccess();\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateUserByAdmin = (userId, token, updateInfo, onSuccess = () => {}) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_BYADMIN_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/users/${userId}`, 'PATCH', {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }, JSON.stringify(updateInfo));\n\n    if (error) {\n      return dispatch({\n        type: USER_UPDATE_BYADMIN_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: USER_UPDATE_BYADMIN_SUCCESS,\n      payload: data\n    }); //updateLocalStorage(getState().userUpdate.updatedUser, 'updatedUser');\n\n    onSuccess();\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/client/src/redux/actionCreators/userActionCreators.js"],"names":["USER_AUTH_REQUEST","USER_AUTH_SUCCESS","USER_AUTH_FAILURE","USER_LOGOUT","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAILURE","USER_CHANGED_NAME","REMOVE_UPDATED_USER","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAILURE","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAILURE","USER_UPDATE_BYADMIN_REQUEST","USER_UPDATE_BYADMIN_SUCCESS","USER_UPDATE_BYADMIN_FAILURE","sendRequest","removeAllShippingAddresses","removeAllPaymentMethods","removeSelectedShipping","removeSelectedPayment","clearCart","updateLocalStorage","user","userType","shoppingapp","localStorage","getItem","JSON","parse","setItem","stringify","authenticateUser","loginInfo","operation","dispatch","getState","type","error","data","process","env","REACT_APP_API_URL","payload","userAuth","loggedInUser","console","log","logoutUser","userUpdate","updatedUser","updateUser","userId","token","updateInfo","onSuccess","Authorization","userChangedName","name","listUsers","searchTerm","page","perPage","deleteUser","updateUserByAdmin"],"mappings":"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","sourcesContent":["import {\n  USER_AUTH_REQUEST,\n  USER_AUTH_SUCCESS,\n  USER_AUTH_FAILURE,\n  USER_LOGOUT,\n  USER_UPDATE_REQUEST,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_FAILURE,\n  USER_CHANGED_NAME,\n  REMOVE_UPDATED_USER,\n  USER_LIST_REQUEST,\n  USER_LIST_SUCCESS,\n  USER_LIST_FAILURE,\n  USER_DELETE_REQUEST,\n  USER_DELETE_SUCCESS,\n  USER_DELETE_FAILURE,\n  USER_UPDATE_BYADMIN_REQUEST,\n  USER_UPDATE_BYADMIN_SUCCESS,\n  USER_UPDATE_BYADMIN_FAILURE,\n} from '../actions/userActions';\nimport { sendRequest } from '../../helpers';\nimport { removeAllShippingAddresses } from './shippingActionCreators';\nimport { removeAllPaymentMethods } from './paymentActionCreators';\nimport {\n  removeSelectedShipping,\n  removeSelectedPayment,\n} from './checkoutActionCreators';\n\nimport { clearCart } from './cartActionCreators';\n\nconst updateLocalStorage = (user, userType) => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n    if (user) {\n      return localStorage.setItem(\n        'shoppingapp',\n        JSON.stringify({ ...shoppingapp, [userType]: user })\n      );\n    }\n    delete shoppingapp[userType];\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n  if (user) {\n    localStorage.setItem('shoppingapp', JSON.stringify({ [userType]: user }));\n  }\n};\n\nexport const authenticateUser =\n  (loginInfo, operation) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: USER_AUTH_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/users/${operation}`,\n        'POST',\n        { 'Content-Type': 'application/json' },\n        JSON.stringify(loginInfo)\n      );\n      if (error) {\n        return dispatch({ type: USER_AUTH_FAILURE, payload: error });\n      }\n      dispatch({ type: USER_AUTH_SUCCESS, payload: data });\n      updateLocalStorage(getState().userAuth.loggedInUser, 'loggedInUser');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const logoutUser = () => (dispatch, getState) => {\n  try {\n    dispatch({ type: USER_LOGOUT });\n    dispatch({ type: REMOVE_UPDATED_USER });\n    updateLocalStorage(getState().userAuth.loggedInUser, 'loggedInUser');\n    updateLocalStorage(getState().userUpdate.updatedUser, 'updatedUser');\n\n    dispatch(removeAllShippingAddresses());\n    dispatch(removeAllPaymentMethods());\n    dispatch(removeSelectedShipping());\n    dispatch(removeSelectedPayment());\n    dispatch(clearCart());\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateUser =\n  (userId, token, updateInfo, onSuccess = () => {}) =>\n  async (dispatch, getState) => {\n    try {\n      dispatch({ type: USER_UPDATE_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/users/${userId}`,\n        'PATCH',\n        {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        JSON.stringify(updateInfo)\n      );\n      if (error) {\n        return dispatch({ type: USER_UPDATE_FAILURE, payload: error });\n      }\n      dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\n      //updateLocalStorage(getState().userUpdate.updatedUser, 'updatedUser');\n      onSuccess();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const userChangedName = (name) => (dispatch, getState) => {\n  dispatch({ type: USER_CHANGED_NAME, payload: name });\n  updateLocalStorage(getState().userAuth.loggedInUser, 'loggedInUser');\n};\n\nexport const listUsers =\n  (token, searchTerm = '', page = '', perPage = '') =>\n  async (dispatch, getState) => {\n    try {\n      dispatch({ type: USER_LIST_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/users?userId=${searchTerm}&page=${page}&perPage=${perPage}`,\n        'GET',\n        {\n          Authorization: `Bearer ${token}`,\n        }\n      );\n      if (error) {\n        return dispatch({ type: USER_LIST_FAILURE, payload: error });\n      }\n      dispatch({ type: USER_LIST_SUCCESS, payload: data });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const deleteUser =\n  (userId, token, onSuccess) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: USER_DELETE_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/users/${userId}`,\n        'DELETE',\n        {\n          Authorization: `Bearer ${token}`,\n        }\n      );\n      if (error) {\n        return dispatch({ type: USER_DELETE_FAILURE, payload: error });\n      }\n      dispatch({ type: USER_DELETE_SUCCESS, payload: data });\n      onSuccess();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const updateUserByAdmin =\n  (userId, token, updateInfo, onSuccess = () => {}) =>\n  async (dispatch, getState) => {\n    try {\n      dispatch({ type: USER_UPDATE_BYADMIN_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/users/${userId}`,\n        'PATCH',\n        {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        JSON.stringify(updateInfo)\n      );\n      if (error) {\n        return dispatch({ type: USER_UPDATE_BYADMIN_FAILURE, payload: error });\n      }\n      dispatch({ type: USER_UPDATE_BYADMIN_SUCCESS, payload: data });\n      //updateLocalStorage(getState().userUpdate.updatedUser, 'updatedUser');\n      onSuccess();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}
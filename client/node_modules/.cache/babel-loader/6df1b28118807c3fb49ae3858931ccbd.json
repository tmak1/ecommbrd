{"ast":null,"code":"import { ADD_TO_CART_REQUEST, ADD_TO_CART_SUCCESS, ADD_TO_CART_FAILURE, REMOVE_FROM_CART } from '../actions/cartActions';\nimport { sendRequest } from '../../helpers';\n\nconst clearLocalStorage = props => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n\n    if (shoppingapp[props]) {\n      delete shoppingapp[props];\n    }\n\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n};\n\nconst updateLocalStorage = cartItems => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n\n    if (cartItems.length > 0) {\n      localStorage.setItem('shoppingapp', JSON.stringify({ ...shoppingapp,\n        cartItems\n      }));\n      return;\n    }\n\n    delete shoppingapp.cartItems;\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n\n  if (cartItems.length > 0) {\n    localStorage.setItem('shoppingapp', JSON.stringify({\n      cartItems\n    }));\n  }\n};\n\nexport const addToCart = (productId, qty) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ADD_TO_CART_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/products/${productId}`);\n\n    if (error) {\n      return dispatch({\n        type: ADD_TO_CART_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: ADD_TO_CART_SUCCESS,\n      payload: { ...data,\n        qty\n      }\n    });\n    updateLocalStorage(getState().cart.cartItems);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const removeFromCart = productId => (dispatch, getState) => {\n  dispatch({\n    type: REMOVE_FROM_CART,\n    payload: productId\n  });\n  updateLocalStorage(getState().cart.cartItems);\n};\nexport const clearCart = () => (dispatch, getState) => {\n  getState().cart.cartItems.forEach(item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      payload: item.id\n    });\n  });\n  clearLocalStorage('cartItems');\n};","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/client/src/redux/actionCreators/cartActionCreators.js"],"names":["ADD_TO_CART_REQUEST","ADD_TO_CART_SUCCESS","ADD_TO_CART_FAILURE","REMOVE_FROM_CART","sendRequest","clearLocalStorage","props","shoppingapp","localStorage","getItem","JSON","parse","setItem","stringify","updateLocalStorage","cartItems","length","addToCart","productId","qty","dispatch","getState","type","error","data","process","env","REACT_APP_API_URL","payload","cart","console","log","removeFromCart","clearCart","forEach","item","id"],"mappings":"AAAA,SACEA,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,gBAJF,QAKO,wBALP;AAMA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnC,MAAIC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAlB;;AACA,MAAIF,WAAJ,EAAiB;AACfA,IAAAA,WAAW,GAAGG,IAAI,CAACC,KAAL,CAAWJ,WAAX,CAAd;;AACA,QAAIA,WAAW,CAACD,KAAD,CAAf,EAAwB;AACtB,aAAOC,WAAW,CAACD,KAAD,CAAlB;AACD;;AACD,WAAOE,YAAY,CAACI,OAAb,CAAqB,aAArB,EAAoCF,IAAI,CAACG,SAAL,CAAeN,WAAf,CAApC,CAAP;AACD;AACF,CATD;;AAWA,MAAMO,kBAAkB,GAAIC,SAAD,IAAe;AACxC,MAAIR,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAlB;;AACA,MAAIF,WAAJ,EAAiB;AACfA,IAAAA,WAAW,GAAGG,IAAI,CAACC,KAAL,CAAWJ,WAAX,CAAd;;AACA,QAAIQ,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxBR,MAAAA,YAAY,CAACI,OAAb,CACE,aADF,EAEEF,IAAI,CAACG,SAAL,CAAe,EAAE,GAAGN,WAAL;AAAkBQ,QAAAA;AAAlB,OAAf,CAFF;AAIA;AACD;;AACD,WAAOR,WAAW,CAACQ,SAAnB;AACA,WAAOP,YAAY,CAACI,OAAb,CAAqB,aAArB,EAAoCF,IAAI,CAACG,SAAL,CAAeN,WAAf,CAApC,CAAP;AACD;;AACD,MAAIQ,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxBR,IAAAA,YAAY,CAACI,OAAb,CAAqB,aAArB,EAAoCF,IAAI,CAACG,SAAL,CAAe;AAAEE,MAAAA;AAAF,KAAf,CAApC;AACD;AACF,CAjBD;;AAmBA,OAAO,MAAME,SAAS,GAAG,CAACC,SAAD,EAAYC,GAAZ,KAAoB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACzE,MAAI;AACFD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEtB;AAAR,KAAD,CAAR;AACA,UAAM;AAAEuB,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkB,MAAMpB,WAAW,CACtC,GAAEqB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,aAAYT,SAAU,EADhB,CAAzC;;AAGA,QAAIK,KAAJ,EAAW;AACT,aAAOH,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEpB,mBAAR;AAA6B0B,QAAAA,OAAO,EAAEL;AAAtC,OAAD,CAAf;AACD;;AACDH,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAErB,mBADC;AAEP2B,MAAAA,OAAO,EAAE,EAAE,GAAGJ,IAAL;AAAWL,QAAAA;AAAX;AAFF,KAAD,CAAR;AAIAL,IAAAA,kBAAkB,CAACO,QAAQ,GAAGQ,IAAX,CAAgBd,SAAjB,CAAlB;AACD,GAbD,CAaE,OAAOQ,KAAP,EAAc;AACdO,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACD;AACF,CAjBM;AAmBP,OAAO,MAAMS,cAAc,GAAId,SAAD,IAAe,CAACE,QAAD,EAAWC,QAAX,KAAwB;AACnED,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEnB,gBAAR;AAA0ByB,IAAAA,OAAO,EAAEV;AAAnC,GAAD,CAAR;AACAJ,EAAAA,kBAAkB,CAACO,QAAQ,GAAGQ,IAAX,CAAgBd,SAAjB,CAAlB;AACD,CAHM;AAKP,OAAO,MAAMkB,SAAS,GAAG,MAAM,CAACb,QAAD,EAAWC,QAAX,KAAwB;AACrDA,EAAAA,QAAQ,GAAGQ,IAAX,CAAgBd,SAAhB,CAA0BmB,OAA1B,CAAmCC,IAAD,IAAU;AAC1Cf,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEnB,gBAAR;AAA0ByB,MAAAA,OAAO,EAAEO,IAAI,CAACC;AAAxC,KAAD,CAAR;AACD,GAFD;AAGA/B,EAAAA,iBAAiB,CAAC,WAAD,CAAjB;AACD,CALM","sourcesContent":["import {\n  ADD_TO_CART_REQUEST,\n  ADD_TO_CART_SUCCESS,\n  ADD_TO_CART_FAILURE,\n  REMOVE_FROM_CART,\n} from '../actions/cartActions';\nimport { sendRequest } from '../../helpers';\n\nconst clearLocalStorage = (props) => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n    if (shoppingapp[props]) {\n      delete shoppingapp[props];\n    }\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n};\n\nconst updateLocalStorage = (cartItems) => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n    if (cartItems.length > 0) {\n      localStorage.setItem(\n        'shoppingapp',\n        JSON.stringify({ ...shoppingapp, cartItems })\n      );\n      return;\n    }\n    delete shoppingapp.cartItems;\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n  if (cartItems.length > 0) {\n    localStorage.setItem('shoppingapp', JSON.stringify({ cartItems }));\n  }\n};\n\nexport const addToCart = (productId, qty) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: ADD_TO_CART_REQUEST });\n    const { error, data } = await sendRequest(\n      `${process.env.REACT_APP_API_URL}/products/${productId}`\n    );\n    if (error) {\n      return dispatch({ type: ADD_TO_CART_FAILURE, payload: error });\n    }\n    dispatch({\n      type: ADD_TO_CART_SUCCESS,\n      payload: { ...data, qty },\n    });\n    updateLocalStorage(getState().cart.cartItems);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const removeFromCart = (productId) => (dispatch, getState) => {\n  dispatch({ type: REMOVE_FROM_CART, payload: productId });\n  updateLocalStorage(getState().cart.cartItems);\n};\n\nexport const clearCart = () => (dispatch, getState) => {\n  getState().cart.cartItems.forEach((item) => {\n    dispatch({ type: REMOVE_FROM_CART, payload: item.id });\n  });\n  clearLocalStorage('cartItems');\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/tmak/Desktop/tei/projects/ecommbrd/client/src/components/users/components/SignupForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport PageHeading from '../../shared/ui/PageHeading';\nimport FormikTextField from '../../shared/formElements/FormikTextField';\nimport BigButton from '../../shared/ui/BigButton';\nimport ShowPasswordAdornment from '../../shared/ui/ShowPasswordAdornment';\nimport { authenticateUser } from '../../../redux/actionCreators/userActionCreators';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    padding: theme.spacing(3)\n  }\n}));\n\nconst SignupForm = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n  const initialValues = {\n    name: '',\n    email: '',\n    password: ''\n  };\n  const validationSchema = Yup.object({\n    name: Yup.string().required('Name required'),\n    email: Yup.string().required('Email required').email('Invalid email format'),\n    password: Yup.string().required('Password required').test('len', 'Must be atleast (3) characters', val => (val === null || val === void 0 ? void 0 : val.length) >= 3)\n  });\n\n  const toggleShowPassword = () => {\n    setShowPassword(prevState => !prevState);\n  };\n\n  const submitHandler = (values, actions) => {\n    //console.log(values);\n    dispatch(authenticateUser(values, 'signup'));\n    actions.setSubmitting(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(PageHeading, {\n      text: \"SIGNUP\",\n      gutterBottom: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validationSchema,\n      onSubmit: submitHandler,\n      validateOnMount: true,\n      enableReinitialize: true,\n      children: formik => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.formControl,\n          children: /*#__PURE__*/_jsxDEV(FormikTextField, {\n            fieldName: \"name\",\n            id: \"name\",\n            name: \"name\",\n            type: \"text\",\n            label: \"Name\",\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.formControl,\n          children: /*#__PURE__*/_jsxDEV(FormikTextField, {\n            fieldName: \"email\",\n            id: \"email\",\n            name: \"email\",\n            type: \"email\",\n            label: \"Email\",\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.formControl,\n          children: /*#__PURE__*/_jsxDEV(FormikTextField, {\n            fieldName: \"password\",\n            type: showPassword ? 'text' : 'password',\n            id: \"password\",\n            name: \"password\",\n            label: \"Password\",\n            variant: \"outlined\",\n            adornment: /*#__PURE__*/_jsxDEV(ShowPasswordAdornment, {\n              showPassword: showPassword,\n              toggleShowPassword: toggleShowPassword\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this),\n            adornmentPosition: \"end\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(BigButton, {\n          type: \"submit\",\n          disabled: !formik.isValid || formik.isSubmitting,\n          children: \"SIGNUP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SignupForm, \"qsUy3lspHxvTPrxW9RpndZyIq0A=\", false, function () {\n  return [useStyles, useDispatch];\n});\n\n_c = SignupForm;\nexport default SignupForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignupForm\");","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/projects/ecommbrd/client/src/components/users/components/SignupForm.js"],"names":["React","useState","useDispatch","Formik","Form","Yup","PageHeading","FormikTextField","BigButton","ShowPasswordAdornment","authenticateUser","makeStyles","Paper","useStyles","theme","root","width","padding","spacing","SignupForm","classes","dispatch","showPassword","setShowPassword","initialValues","name","email","password","validationSchema","object","string","required","test","val","length","toggleShowPassword","prevState","submitHandler","values","actions","setSubmitting","formik","formControl","isValid","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\n\nimport PageHeading from '../../shared/ui/PageHeading';\nimport FormikTextField from '../../shared/formElements/FormikTextField';\nimport BigButton from '../../shared/ui/BigButton';\nimport ShowPasswordAdornment from '../../shared/ui/ShowPasswordAdornment';\n\nimport { authenticateUser } from '../../../redux/actionCreators/userActionCreators';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    padding: theme.spacing(3),\n  },\n}));\n\nconst SignupForm = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n  const validationSchema = Yup.object({\n    name: Yup.string().required('Name required'),\n    email: Yup.string()\n      .required('Email required')\n      .email('Invalid email format'),\n    password: Yup.string()\n      .required('Password required')\n      .test('len', 'Must be atleast (3) characters', (val) => val?.length >= 3),\n  });\n\n  const toggleShowPassword = () => {\n    setShowPassword((prevState) => !prevState);\n  };\n\n  const submitHandler = (values, actions) => {\n    //console.log(values);\n    dispatch(authenticateUser(values, 'signup'));\n    actions.setSubmitting(false);\n  };\n  return (\n    <Paper className={classes.root}>\n      <PageHeading text=\"SIGNUP\" gutterBottom />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={submitHandler}\n        validateOnMount\n        enableReinitialize\n      >\n        {(formik) => (\n          <Form>\n            <div className={classes.formControl}>\n              <FormikTextField\n                fieldName=\"name\"\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                label=\"Name\"\n                variant=\"outlined\"\n              />\n            </div>\n            <div className={classes.formControl}>\n              <FormikTextField\n                fieldName=\"email\"\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                label=\"Email\"\n                variant=\"outlined\"\n              />\n            </div>\n            <div className={classes.formControl}>\n              <FormikTextField\n                fieldName=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                id=\"password\"\n                name=\"password\"\n                label=\"Password\"\n                variant=\"outlined\"\n                adornment={\n                  <ShowPasswordAdornment\n                    showPassword={showPassword}\n                    toggleShowPassword={toggleShowPassword}\n                  />\n                }\n                adornmentPosition=\"end\"\n              />\n            </div>\n            <BigButton\n              type=\"submit\"\n              disabled={!formik.isValid || formik.isSubmitting}\n            >\n              SIGNUP\n            </BigButton>\n          </Form>\n        )}\n      </Formik>\n    </Paper>\n  );\n};\n\nexport default SignupForm;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/tmak/Desktop/tei/projects/ecommbrd/client/src/components/shared/formElements/FormikTextField.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useField } from 'formik';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    width: '95%',\n    margin: theme.spacing(2, 'auto'),\n    fontSize: theme.spacing(2)\n  }\n}));\n\nconst FormikTextField = ({\n  fieldName,\n  adornment,\n  adornmentPosition = 'end',\n  maxLength,\n  multiline = false,\n  rows = 0,\n  ...props\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [field, meta] = useField(fieldName);\n  return /*#__PURE__*/_jsxDEV(TextField, {\n    id: field.name,\n    name: field.name,\n    helperText: meta.touched ? meta.error : '',\n    error: meta.touched && Boolean(meta.error),\n    value: field.value,\n    onInput: e => {\n      let input = Number(e.target.value);\n\n      if (input && input > 0 && maxLength) {\n        e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0, maxLength);\n      }\n    },\n    InputProps: {\n      [`${adornmentPosition}Adornment`]: adornment\n    },\n    onChange: field.onChange,\n    onBlur: field.onBlur,\n    className: classes.textField,\n    multiline: multiline,\n    inputProps: {\n      maxLength\n    },\n    rows: rows,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormikTextField, \"8EvNT3mbfm5FoiFpt/HWmW1Ck/s=\", false, function () {\n  return [useStyles, useField];\n});\n\n_c = FormikTextField;\nexport default FormikTextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormikTextField\");","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/projects/ecommbrd/client/src/components/shared/formElements/FormikTextField.js"],"names":["React","useField","makeStyles","TextField","useStyles","theme","textField","width","margin","spacing","fontSize","FormikTextField","fieldName","adornment","adornmentPosition","maxLength","multiline","rows","props","classes","field","meta","name","touched","error","Boolean","value","e","input","Number","target","Math","max","parseInt","toString","slice","onChange","onBlur"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAAEG,KAAD,KAAY;AACvCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAE,KADE;AAETC,IAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiB,MAAjB,CAFC;AAGTC,IAAAA,QAAQ,EAAEL,KAAK,CAACI,OAAN,CAAc,CAAd;AAHD;AAD4B,CAAZ,CAAD,CAA5B;;AAQA,MAAME,eAAe,GAAG,CAAC;AACvBC,EAAAA,SADuB;AAEvBC,EAAAA,SAFuB;AAGvBC,EAAAA,iBAAiB,GAAG,KAHG;AAIvBC,EAAAA,SAJuB;AAKvBC,EAAAA,SAAS,GAAG,KALW;AAMvBC,EAAAA,IAAI,GAAG,CANgB;AAOvB,KAAGC;AAPoB,CAAD,KAQlB;AAAA;;AACJ,QAAMC,OAAO,GAAGf,SAAS,EAAzB;AACA,QAAM,CAACgB,KAAD,EAAQC,IAAR,IAAgBpB,QAAQ,CAACW,SAAD,CAA9B;AACA,sBACE,QAAC,SAAD;AACE,IAAA,EAAE,EAAEQ,KAAK,CAACE,IADZ;AAEE,IAAA,IAAI,EAAEF,KAAK,CAACE,IAFd;AAGE,IAAA,UAAU,EAAED,IAAI,CAACE,OAAL,GAAeF,IAAI,CAACG,KAApB,GAA4B,EAH1C;AAIE,IAAA,KAAK,EAAEH,IAAI,CAACE,OAAL,IAAgBE,OAAO,CAACJ,IAAI,CAACG,KAAN,CAJhC;AAKE,IAAA,KAAK,EAAEJ,KAAK,CAACM,KALf;AAME,IAAA,OAAO,EAAGC,CAAD,IAAO;AACd,UAAIC,KAAK,GAAGC,MAAM,CAACF,CAAC,CAACG,MAAF,CAASJ,KAAV,CAAlB;;AACA,UAAIE,KAAK,IAAIA,KAAK,GAAG,CAAjB,IAAsBb,SAA1B,EAAqC;AACnCY,QAAAA,CAAC,CAACG,MAAF,CAASJ,KAAT,GAAiBK,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYC,QAAQ,CAACN,CAAC,CAACG,MAAF,CAASJ,KAAV,CAApB,EACdQ,QADc,GAEdC,KAFc,CAER,CAFQ,EAELpB,SAFK,CAAjB;AAGD;AACF,KAbH;AAcE,IAAA,UAAU,EAAE;AACV,OAAE,GAAED,iBAAkB,WAAtB,GAAmCD;AADzB,KAdd;AAiBE,IAAA,QAAQ,EAAEO,KAAK,CAACgB,QAjBlB;AAkBE,IAAA,MAAM,EAAEhB,KAAK,CAACiB,MAlBhB;AAmBE,IAAA,SAAS,EAAElB,OAAO,CAACb,SAnBrB;AAoBE,IAAA,SAAS,EAAEU,SApBb;AAqBE,IAAA,UAAU,EAAE;AAAED,MAAAA;AAAF,KArBd;AAsBE,IAAA,IAAI,EAAEE,IAtBR;AAAA,OAuBMC;AAvBN;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CAtCD;;GAAMP,e;UASYP,S,EACMH,Q;;;KAVlBU,e;AAwCN,eAAeA,eAAf","sourcesContent":["import React from 'react';\nimport { useField } from 'formik';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    width: '95%',\n    margin: theme.spacing(2, 'auto'),\n    fontSize: theme.spacing(2),\n  },\n}));\n\nconst FormikTextField = ({\n  fieldName,\n  adornment,\n  adornmentPosition = 'end',\n  maxLength,\n  multiline = false,\n  rows = 0,\n  ...props\n}) => {\n  const classes = useStyles();\n  const [field, meta] = useField(fieldName);\n  return (\n    <TextField\n      id={field.name}\n      name={field.name}\n      helperText={meta.touched ? meta.error : ''}\n      error={meta.touched && Boolean(meta.error)}\n      value={field.value}\n      onInput={(e) => {\n        let input = Number(e.target.value);\n        if (input && input > 0 && maxLength) {\n          e.target.value = Math.max(0, parseInt(e.target.value))\n            .toString()\n            .slice(0, maxLength);\n        }\n      }}\n      InputProps={{\n        [`${adornmentPosition}Adornment`]: adornment,\n      }}\n      onChange={field.onChange}\n      onBlur={field.onBlur}\n      className={classes.textField}\n      multiline={multiline}\n      inputProps={{ maxLength }}\n      rows={rows}\n      {...props}\n    />\n  );\n};\n\nexport default FormikTextField;\n"]},"metadata":{},"sourceType":"module"}
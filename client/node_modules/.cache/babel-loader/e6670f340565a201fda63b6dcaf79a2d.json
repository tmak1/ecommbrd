{"ast":null,"code":"var _jsxFileName = \"/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/client/src/components/checkout/components/PaymentForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport FormikTextField from '../../shared/formElements/FormikTextField';\nimport BigButton from '../../shared/ui/BigButton';\nimport AlertMessage from '../../shared/ui/AlertMessage';\nimport { savePaymentMethod } from '../../../redux/actionCreators/paymentActionCreators';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormikSelect from '../../shared/formElements/FormikSelect';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Zoom from '@material-ui/core/Zoom';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '95%',\n    margin: '0 auto',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(2, 5),\n    backgroundColor: 'rgba(245,245,245,0.3)',\n    borderRadius: theme.spacing(1),\n    '&>*': {\n      width: '99%',\n      display: 'block'\n    }\n  },\n  sections: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    '&>*': {\n      width: '99%',\n      display: 'block'\n    }\n  },\n  iconButtonDiv: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  cvv: {\n    backgroundColor: 'white',\n    fontWeight: '900'\n  }\n}));\n\nconst PaymentForm = ({\n  paymentMethod,\n  user,\n  token,\n  onSuccess,\n  paymentError,\n  validateStep,\n  setDisableAddNew,\n  dummyItemId\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const initialValues = {\n    id: paymentMethod.id,\n    nameOnCard: paymentMethod.nameOnCard || '',\n    cardNumber: paymentMethod.cardNumber || '',\n    expiryMonth: paymentMethod.expiryMonth || '',\n    expiryYear: paymentMethod.expiryYear || '',\n    cvv: ' '\n  };\n  const [selectedExpiryMonth, setSelectedExpiryMonth] = useState(paymentMethod.expiryMonth);\n  const [selectedExpiryYear, setSelectedExpiryYear] = useState(paymentMethod.expiryYear);\n  const validationSchema = Yup.object({\n    nameOnCard: Yup.string(),\n    cardNumber: Yup.number('Must be a number').required('Card number required').positive('Must be positive').integer('No decimal points').test('len', 'Must be exactly 16 digits', val => val && val.toString().length === 16),\n    expiryMonth: Yup.number('Must be a number').required('Expiry month required').positive('Must be positive').integer('No decimal points').oneOf([...Array(12).keys()].map(num => num + 1)),\n    expiryYear: Yup.number('Must be a number').required('Expiry year required').positive('Must be positive').integer('No decimal points').oneOf([...Array(7).keys()].map(num => {\n      return num + new Date().getFullYear() - 2000;\n    })),\n    cvv: Yup.number('Must be a number').required('Required').positive('Must be positive').integer('No decimal points').test('len', 'Invalid format', val => val && val.toString().length === 3)\n  });\n\n  const submitHandler = (values, actions) => {\n    if (paymentMethod.id === dummyItemId) {\n      delete values.id;\n      delete values.cvv;\n      dispatch(savePaymentMethod(user.id, token, values, onSuccess));\n    } else {\n      //console.log('here ', values);\n      validateStep(values);\n    }\n\n    actions.setSubmitting(false);\n    setDisableAddNew(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: paymentError && /*#__PURE__*/_jsxDEV(AlertMessage, {\n        message: paymentError,\n        severity: \"error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues,\n        validationSchema: validationSchema,\n        onSubmit: submitHandler,\n        validateOnMount: true,\n        enableReinitialize: true,\n        children: formik => {\n          return /*#__PURE__*/_jsxDEV(Form, {\n            className: classes.root,\n            children: [paymentMethod.id === dummyItemId && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.iconButtonDiv,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                TransitionComponent: Zoom,\n                title: \"Reset form\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  disabled: !token,\n                  color: \"primary\",\n                  onClick: () => formik.resetForm(),\n                  children: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 156,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              style: {\n                marginBottom: '25px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                size: \"small\",\n                margin: \"none\",\n                fullWidth: true,\n                children: /*#__PURE__*/_jsxDEV(FormikTextField, {\n                  fieldName: \"nameOnCard\",\n                  type: \"text\",\n                  id: \"nameOnCard\",\n                  name: \"nameOnCard\",\n                  label: \"Name on Card\",\n                  disabled: paymentMethod.id !== dummyItemId,\n                  variant: \"standard\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.sections,\n                children: /*#__PURE__*/_jsxDEV(FormControl, {\n                  size: \"small\",\n                  margin: \"none\",\n                  children: /*#__PURE__*/_jsxDEV(FormikTextField, {\n                    fieldName: \"cardNumber\",\n                    type: \"number\",\n                    maxLength: \"16\",\n                    id: \"cardNumber\",\n                    name: \"cardNumber\",\n                    label: \"Card Number\",\n                    disabled: paymentMethod.id !== dummyItemId,\n                    variant: \"standard\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 175,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.sections,\n                children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                  size: \"small\",\n                  variant: \"standard\",\n                  children: /*#__PURE__*/_jsxDEV(FormikSelect, {\n                    as: \"select\",\n                    fieldName: \"expiryMonth\",\n                    id: \"expiryMonth\",\n                    name: \"expiryMonth\",\n                    disabled: paymentMethod.id !== dummyItemId,\n                    label: \"Month\",\n                    value: selectedExpiryMonth,\n                    itemsArray: [...Array(12).keys()].map(num => num + 1),\n                    onChange: event => setSelectedExpiryMonth(event.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                  size: \"small\",\n                  variant: \"standard\",\n                  children: /*#__PURE__*/_jsxDEV(FormikSelect, {\n                    as: \"select\",\n                    fieldName: \"expiryYear\",\n                    id: \"expiryYear\",\n                    name: \"expiryYear\",\n                    disabled: paymentMethod.id !== dummyItemId,\n                    label: \"Year\",\n                    value: selectedExpiryYear,\n                    itemsArray: [...Array(7).keys()].map(num => {\n                      return num + new Date().getFullYear() - 2000;\n                    }),\n                    onChange: event => setSelectedExpiryYear(event.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 204,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                  size: \"small\",\n                  margin: \"none\",\n                  children: /*#__PURE__*/_jsxDEV(FormikTextField, {\n                    fieldName: \"cvv\",\n                    type: \"number\",\n                    maxLength: \"3\",\n                    id: \"cvv\",\n                    name: \"cvv\",\n                    label: \"CVV\",\n                    color: \"primary\",\n                    variant: \"standard\",\n                    className: classes.cvv,\n                    required: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(BigButton, {\n              type: \"submit\",\n              disabled: !formik.isValid || formik.isSubmitting || JSON.stringify(initialValues) === JSON.stringify(formik.values),\n              children: [paymentMethod.id === dummyItemId ? 'SAVE' : 'USE', \" PAYMENT METHOD\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PaymentForm, \"pOwa16cq/dyr2sUhNyccJnztTxE=\", false, function () {\n  return [useStyles, useDispatch];\n});\n\n_c = PaymentForm;\nexport default PaymentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/client/src/components/checkout/components/PaymentForm.js"],"names":["React","useState","useDispatch","Formik","Form","Yup","FormikTextField","BigButton","AlertMessage","savePaymentMethod","makeStyles","FormControl","FormikSelect","IconButton","Tooltip","Zoom","RefreshIcon","useStyles","theme","root","width","margin","display","flexDirection","alignItems","padding","spacing","backgroundColor","borderRadius","sections","justifyContent","iconButtonDiv","cvv","fontWeight","PaymentForm","paymentMethod","user","token","onSuccess","paymentError","validateStep","setDisableAddNew","dummyItemId","classes","dispatch","initialValues","id","nameOnCard","cardNumber","expiryMonth","expiryYear","selectedExpiryMonth","setSelectedExpiryMonth","selectedExpiryYear","setSelectedExpiryYear","validationSchema","object","string","number","required","positive","integer","test","val","toString","length","oneOf","Array","keys","map","num","Date","getFullYear","submitHandler","values","actions","setSubmitting","formik","resetForm","marginBottom","event","target","value","isValid","isSubmitting","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\n\nimport FormikTextField from '../../shared/formElements/FormikTextField';\nimport BigButton from '../../shared/ui/BigButton';\nimport AlertMessage from '../../shared/ui/AlertMessage';\n\nimport { savePaymentMethod } from '../../../redux/actionCreators/paymentActionCreators';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormikSelect from '../../shared/formElements/FormikSelect';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Zoom from '@material-ui/core/Zoom';\n\nimport RefreshIcon from '@material-ui/icons/Refresh';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '95%',\n    margin: '0 auto',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(2, 5),\n    backgroundColor: 'rgba(245,245,245,0.3)',\n    borderRadius: theme.spacing(1),\n    '&>*': {\n      width: '99%',\n      display: 'block',\n    },\n  },\n  sections: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    '&>*': {\n      width: '99%',\n      display: 'block',\n    },\n  },\n  iconButtonDiv: {\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  cvv: {\n    backgroundColor: 'white',\n    fontWeight: '900',\n  },\n}));\n\nconst PaymentForm = ({\n  paymentMethod,\n  user,\n  token,\n  onSuccess,\n  paymentError,\n  validateStep,\n  setDisableAddNew,\n  dummyItemId,\n}) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const initialValues = {\n    id: paymentMethod.id,\n    nameOnCard: paymentMethod.nameOnCard || '',\n    cardNumber: paymentMethod.cardNumber || '',\n    expiryMonth: paymentMethod.expiryMonth || '',\n    expiryYear: paymentMethod.expiryYear || '',\n    cvv: ' ',\n  };\n  const [selectedExpiryMonth, setSelectedExpiryMonth] = useState(\n    paymentMethod.expiryMonth\n  );\n  const [selectedExpiryYear, setSelectedExpiryYear] = useState(\n    paymentMethod.expiryYear\n  );\n  const validationSchema = Yup.object({\n    nameOnCard: Yup.string(),\n    cardNumber: Yup.number('Must be a number')\n      .required('Card number required')\n      .positive('Must be positive')\n      .integer('No decimal points')\n      .test(\n        'len',\n        'Must be exactly 16 digits',\n        (val) => val && val.toString().length === 16\n      ),\n    expiryMonth: Yup.number('Must be a number')\n      .required('Expiry month required')\n      .positive('Must be positive')\n      .integer('No decimal points')\n      .oneOf([...Array(12).keys()].map((num) => num + 1)),\n    expiryYear: Yup.number('Must be a number')\n      .required('Expiry year required')\n      .positive('Must be positive')\n      .integer('No decimal points')\n      .oneOf(\n        [...Array(7).keys()].map((num) => {\n          return num + new Date().getFullYear() - 2000;\n        })\n      ),\n    cvv: Yup.number('Must be a number')\n      .required('Required')\n      .positive('Must be positive')\n      .integer('No decimal points')\n      .test(\n        'len',\n        'Invalid format',\n        (val) => val && val.toString().length === 3\n      ),\n  });\n\n  const submitHandler = (values, actions) => {\n    if (paymentMethod.id === dummyItemId) {\n      delete values.id;\n      delete values.cvv;\n      dispatch(savePaymentMethod(user.id, token, values, onSuccess));\n    } else {\n      //console.log('here ', values);\n      validateStep(values);\n    }\n    actions.setSubmitting(false);\n    setDisableAddNew(false);\n  };\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      <div>\n        {paymentError && (\n          <AlertMessage message={paymentError} severity=\"error\" />\n        )}\n      </div>\n      <div>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={submitHandler}\n          validateOnMount\n          enableReinitialize\n        >\n          {(formik) => {\n            return (\n              <Form className={classes.root}>\n                {paymentMethod.id === dummyItemId && (\n                  <div className={classes.iconButtonDiv}>\n                    <div></div>\n                    <Tooltip TransitionComponent={Zoom} title=\"Reset form\">\n                      <IconButton\n                        disabled={!token}\n                        color=\"primary\"\n                        onClick={() => formik.resetForm()}\n                      >\n                        <RefreshIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </div>\n                )}\n                <FormControl style={{ marginBottom: '25px' }}>\n                  <FormControl size=\"small\" margin=\"none\" fullWidth>\n                    <FormikTextField\n                      fieldName=\"nameOnCard\"\n                      type=\"text\"\n                      id=\"nameOnCard\"\n                      name=\"nameOnCard\"\n                      label=\"Name on Card\"\n                      disabled={paymentMethod.id !== dummyItemId}\n                      variant=\"standard\"\n                    />\n                  </FormControl>\n                  <div className={classes.sections}>\n                    <FormControl size=\"small\" margin=\"none\">\n                      <FormikTextField\n                        fieldName=\"cardNumber\"\n                        type=\"number\"\n                        maxLength=\"16\"\n                        id=\"cardNumber\"\n                        name=\"cardNumber\"\n                        label=\"Card Number\"\n                        disabled={paymentMethod.id !== dummyItemId}\n                        variant=\"standard\"\n                      />\n                    </FormControl>\n                  </div>\n                  <div className={classes.sections}>\n                    <FormControl size=\"small\" variant=\"standard\">\n                      <FormikSelect\n                        as=\"select\"\n                        fieldName=\"expiryMonth\"\n                        id=\"expiryMonth\"\n                        name=\"expiryMonth\"\n                        disabled={paymentMethod.id !== dummyItemId}\n                        label=\"Month\"\n                        value={selectedExpiryMonth}\n                        itemsArray={[...Array(12).keys()].map((num) => num + 1)}\n                        onChange={(event) =>\n                          setSelectedExpiryMonth(event.target.value)\n                        }\n                      />\n                    </FormControl>\n                    <FormControl size=\"small\" variant=\"standard\">\n                      <FormikSelect\n                        as=\"select\"\n                        fieldName=\"expiryYear\"\n                        id=\"expiryYear\"\n                        name=\"expiryYear\"\n                        disabled={paymentMethod.id !== dummyItemId}\n                        label=\"Year\"\n                        value={selectedExpiryYear}\n                        itemsArray={[...Array(7).keys()].map((num) => {\n                          return num + new Date().getFullYear() - 2000;\n                        })}\n                        onChange={(event) =>\n                          setSelectedExpiryYear(event.target.value)\n                        }\n                      />\n                    </FormControl>\n                    <FormControl size=\"small\" margin=\"none\">\n                      <FormikTextField\n                        fieldName=\"cvv\"\n                        type=\"number\"\n                        maxLength=\"3\"\n                        id=\"cvv\"\n                        name=\"cvv\"\n                        label=\"CVV\"\n                        color=\"primary\"\n                        variant=\"standard\"\n                        className={classes.cvv}\n                        required\n                      />\n                    </FormControl>\n                  </div>\n                </FormControl>\n\n                <BigButton\n                  type=\"submit\"\n                  disabled={\n                    !formik.isValid ||\n                    formik.isSubmitting ||\n                    JSON.stringify(initialValues) ===\n                      JSON.stringify(formik.values)\n                  }\n                >\n                  {paymentMethod.id === dummyItemId ? 'SAVE' : 'USE'} PAYMENT\n                  METHOD\n                </BigButton>\n              </Form>\n            );\n          }}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentForm;\n"]},"metadata":{},"sourceType":"module"}
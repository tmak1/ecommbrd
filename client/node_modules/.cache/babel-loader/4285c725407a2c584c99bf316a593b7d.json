{"ast":null,"code":"export const sendRequest = async (url, method = 'GET', headers = {}, body = null) => {\n  try {\n    const response = await fetch(url, {\n      method,\n      headers,\n      body\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw data;\n    }\n\n    return {\n      error: null,\n      data\n    };\n  } catch (error) {\n    console.log(error);\n    const msg = error.stack ? error.message || 'An unknown error occured' : 'An unknown error occured';\n    return {\n      error: msg,\n      data: null\n    };\n  }\n};\nexport const capitalize = item => {\n  const itemArray = Object.entries(item).map(([key, val]) => {\n    if (key === 'id' || typeof val !== 'string') {\n      return [key, val];\n    }\n\n    return [key, val.trim().slice(0, 1).toUpperCase().concat(val.trim().slice(1))];\n  });\n  const itemObj = Object.fromEntries(itemArray);\n  return itemObj;\n};\nexport const addressStringify = shippingAddress => {\n  const {\n    street,\n    suburb,\n    postcode,\n    city,\n    country\n  } = shippingAddress;\n  let shipping = {\n    street,\n    suburb,\n    postcode,\n    city,\n    country\n  };\n\n  if (!shipping.suburb || shipping.suburb === '') {\n    delete shipping.suburb;\n  }\n\n  shipping = Object.entries(shipping).map(([key, val]) => val).join(', ');\n  return shipping;\n};\nexport const paymentMethodStringify = paymentMethod => {\n  const payment = ['MasterCard', 'VISA'][Math.floor(Math.random() * 2)] + ' xxxx xxxx xxxx ' + paymentMethod.cardNumber.toString().slice(-4);\n  return payment;\n};\nexport const formatFileName = fileName => {\n  return fileName.trim().split(/\\s+/).map(str => str.toLowerCase()).join('_');\n};\nexport const dateFormatter = dateString => {\n  const dateObj = new Date(Date.parse(dateString));\n  return dateObj.toLocaleDateString();\n};","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/client/src/helpers.js"],"names":["sendRequest","url","method","headers","body","response","fetch","data","json","ok","error","console","log","msg","stack","message","capitalize","item","itemArray","Object","entries","map","key","val","trim","slice","toUpperCase","concat","itemObj","fromEntries","addressStringify","shippingAddress","street","suburb","postcode","city","country","shipping","join","paymentMethodStringify","paymentMethod","payment","Math","floor","random","cardNumber","toString","formatFileName","fileName","split","str","toLowerCase","dateFormatter","dateString","dateObj","Date","parse","toLocaleDateString"],"mappings":"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","sourcesContent":["export const sendRequest = async (\n  url,\n  method = 'GET',\n  headers = {},\n  body = null\n) => {\n  try {\n    const response = await fetch(url, { method, headers, body });\n    const data = await response.json();\n    if (!response.ok) {\n      throw data;\n    }\n    return { error: null, data };\n  } catch (error) {\n    console.log(error);\n    const msg = error.stack\n      ? error.message || 'An unknown error occured'\n      : 'An unknown error occured';\n    return { error: msg, data: null };\n  }\n};\n\nexport const capitalize = (item) => {\n  const itemArray = Object.entries(item).map(([key, val]) => {\n    if (key === 'id' || typeof val !== 'string') {\n      return [key, val];\n    }\n    return [\n      key,\n      val.trim().slice(0, 1).toUpperCase().concat(val.trim().slice(1)),\n    ];\n  });\n  const itemObj = Object.fromEntries(itemArray);\n  return itemObj;\n};\n\nexport const addressStringify = (shippingAddress) => {\n  const { street, suburb, postcode, city, country } = shippingAddress;\n  let shipping = { street, suburb, postcode, city, country };\n  if (!shipping.suburb || shipping.suburb === '') {\n    delete shipping.suburb;\n  }\n  shipping = Object.entries(shipping)\n    .map(([key, val]) => val)\n    .join(', ');\n\n  return shipping;\n};\n\nexport const paymentMethodStringify = (paymentMethod) => {\n  const payment =\n    ['MasterCard', 'VISA'][Math.floor(Math.random() * 2)] +\n    ' xxxx xxxx xxxx ' +\n    paymentMethod.cardNumber.toString().slice(-4);\n  return payment;\n};\n\nexport const formatFileName = (fileName) => {\n  return fileName\n    .trim()\n    .split(/\\s+/)\n    .map((str) => str.toLowerCase())\n    .join('_');\n};\n\nexport const dateFormatter = (dateString) => {\n  const dateObj = new Date(Date.parse(dateString));\n  return dateObj.toLocaleDateString();\n};\n"]},"metadata":{},"sourceType":"module"}
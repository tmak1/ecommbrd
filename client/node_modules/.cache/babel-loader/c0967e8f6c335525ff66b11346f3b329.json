{"ast":null,"code":"var _jsxFileName = \"/Users/tmak/Desktop/tei/projects/ecommbrd/client/src/components/shared/ui/FilterTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport categories from '../../../categories';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: 240,\n    flexGrow: 1,\n    maxWidth: 400,\n    '&$checked': {\n      color: 'rgba(0,0,0,1.0)'\n    },\n    checked: {}\n  },\n  itemDiv: {\n    display: 'flex',\n    alignItems: 'center',\n    '& > *': {\n      marginLeft: 0\n    },\n    [theme.breakpoints.down('lg')]: {\n      display: 'flex',\n      flexDirection: 'row'\n    }\n  }\n}));\nconst CheckboxComp = withStyles({\n  root: {\n    '&$checked': {\n      color: '#000'\n    }\n  },\n  checked: {}\n})(props => /*#__PURE__*/_jsxDEV(Checkbox, {\n  color: \"default\",\n  ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 40,\n  columnNumber: 15\n}, this));\n\nconst getCategories = () => categories.reduce((acc, curr) => {\n  return { ...acc,\n    [curr]: false\n  };\n}, {});\n\nconst FilterTree = ({\n  reset,\n  setFilters\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [checked, setChecked] = useState(getCategories());\n\n  const handleChange = event => {\n    setChecked({ ...checked,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  useEffect(() => {\n    const filterCategories = Object.entries(checked).map(([key, val]) => val ? key : null).filter(category => category !== null);\n    setFilters(filterCategories);\n  }, [checked, setFilters]);\n  useEffect(() => {\n    if (reset) {\n      setChecked(getCategories);\n    }\n  }, [reset]);\n  return /*#__PURE__*/_jsxDEV(TreeView, {\n    className: classes.root,\n    defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 28\n    }, this),\n    defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 26\n    }, this),\n    defaultExpanded: ['1'],\n    children: /*#__PURE__*/_jsxDEV(TreeItem, {\n      nodeId: \"1\",\n      label: \"Category\",\n      children: categories.map((category, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.itemDiv,\n        children: [/*#__PURE__*/_jsxDEV(CheckboxComp, {\n          checked: checked[category],\n          name: category,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TreeItem, {\n          nodeId: String(index + 2),\n          label: category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FilterTree, \"iVF7tnYy81BrrOliqlf2kvN/qq4=\", false, function () {\n  return [useStyles];\n});\n\n_c = FilterTree;\nexport default FilterTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterTree\");","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/projects/ecommbrd/client/src/components/shared/ui/FilterTree.js"],"names":["React","useState","useEffect","categories","makeStyles","withStyles","TreeView","ExpandMoreIcon","ChevronRightIcon","TreeItem","Checkbox","useStyles","theme","root","height","flexGrow","maxWidth","color","checked","itemDiv","display","alignItems","marginLeft","breakpoints","down","flexDirection","CheckboxComp","props","getCategories","reduce","acc","curr","FilterTree","reset","setFilters","classes","setChecked","handleChange","event","target","name","filterCategories","Object","entries","map","key","val","filter","category","index","String"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport categories from '../../../categories';\n\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: 240,\n    flexGrow: 1,\n    maxWidth: 400,\n    '&$checked': {\n      color: 'rgba(0,0,0,1.0)',\n    },\n    checked: {},\n  },\n  itemDiv: {\n    display: 'flex',\n    alignItems: 'center',\n    '& > *': { marginLeft: 0 },\n    [theme.breakpoints.down('lg')]: {\n      display: 'flex',\n      flexDirection: 'row',\n    },\n  },\n}));\n\nconst CheckboxComp = withStyles({\n  root: {\n    '&$checked': {\n      color: '#000',\n    },\n  },\n  checked: {},\n})((props) => <Checkbox color=\"default\" {...props} />);\n\nconst getCategories = () =>\n  categories.reduce((acc, curr) => {\n    return { ...acc, [curr]: false };\n  }, {});\n\nconst FilterTree = ({ reset, setFilters }) => {\n  const classes = useStyles();\n  const [checked, setChecked] = useState(getCategories());\n  const handleChange = (event) => {\n    setChecked({ ...checked, [event.target.name]: event.target.checked });\n  };\n  useEffect(() => {\n    const filterCategories = Object.entries(checked)\n      .map(([key, val]) => (val ? key : null))\n      .filter((category) => category !== null);\n    setFilters(filterCategories);\n  }, [checked, setFilters]);\n\n  useEffect(() => {\n    if (reset) {\n      setChecked(getCategories);\n    }\n  }, [reset]);\n\n  return (\n    <TreeView\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n      defaultExpanded={['1']}\n    >\n      <TreeItem nodeId=\"1\" label=\"Category\">\n        {categories.map((category, index) => (\n          <div key={index} className={classes.itemDiv}>\n            <CheckboxComp\n              checked={checked[category]}\n              name={category}\n              onChange={handleChange}\n            />\n            <TreeItem nodeId={String(index + 2)} label={category} />\n          </div>\n        ))}\n      </TreeItem>\n    </TreeView>\n  );\n};\n\nexport default FilterTree;\n"]},"metadata":{},"sourceType":"module"}
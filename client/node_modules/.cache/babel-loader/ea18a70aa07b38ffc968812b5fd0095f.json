{"ast":null,"code":"import * as req from '../actions/paymentActions';\nimport { sendRequest } from '../../helpers';\n\nconst clearLocalStorage = props => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n\n    if (shoppingapp[props]) {\n      delete shoppingapp[props];\n    }\n\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n};\n\nconst updateLocalStorage = paymentMethods => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n\n    if ((paymentMethods === null || paymentMethods === void 0 ? void 0 : paymentMethods.length) > 0) {\n      return localStorage.setItem('shoppingapp', JSON.stringify({ ...shoppingapp,\n        paymentMethods\n      }));\n    }\n\n    delete shoppingapp.paymentMethods;\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n\n  if (paymentMethods) {\n    localStorage.setItem('shoppingapp', JSON.stringify({\n      paymentMethods\n    }));\n  }\n};\n\nexport const getPaymentMethods = (userId, token) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: req.PAYMENT_METHODS_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/payment/users/${userId}`, 'GET', {\n      Authorization: `Bearer ${token}`\n    });\n\n    if (error) {\n      return dispatch({\n        type: req.PAYMENT_METHODS_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: req.PAYMENT_METHODS_SUCCESS,\n      payload: data\n    });\n    updateLocalStorage(getState().payment.paymentMethods);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const savePaymentMethod = (userId, token, paymentInfo, onSuccess) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: req.SAVE_PAYMENT_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/payment/users/${userId}/new`, 'POST', {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }, JSON.stringify(paymentInfo));\n\n    if (error) {\n      return dispatch({\n        type: req.SAVE_PAYMENT_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: req.SAVE_PAYMENT_SUCCESS,\n      payload: data\n    });\n    updateLocalStorage(getState().payment.paymentMethods);\n    onSuccess('saved');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const removePaymentMethod = (userId, token, paymentId, onSuccess) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: req.REMOVE_PAYMENT_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/payment/${paymentId}/users/${userId}`, 'DELETE', {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    });\n\n    if (error) {\n      return dispatch({\n        type: req.REMOVE_PAYMENT_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: req.REMOVE_PAYMENT_SUCCESS,\n      payload: data\n    });\n    updateLocalStorage(getState().payment.paymentMethods);\n    onSuccess('removed');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const removeAllPaymentMethods = () => (dispatch, getState) => {\n  dispatch({\n    type: req.REMOVE_ALL_PAYMENT\n  });\n  clearLocalStorage('paymentMethods');\n};","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/projects/ecommbrd/client/src/redux/actionCreators/paymentActionCreators.js"],"names":["req","sendRequest","clearLocalStorage","props","shoppingapp","localStorage","getItem","JSON","parse","setItem","stringify","updateLocalStorage","paymentMethods","length","getPaymentMethods","userId","token","dispatch","getState","type","PAYMENT_METHODS_REQUEST","error","data","process","env","REACT_APP_API_URL","Authorization","PAYMENT_METHODS_FAILURE","payload","PAYMENT_METHODS_SUCCESS","payment","console","log","savePaymentMethod","paymentInfo","onSuccess","SAVE_PAYMENT_REQUEST","SAVE_PAYMENT_FAILURE","SAVE_PAYMENT_SUCCESS","removePaymentMethod","paymentId","REMOVE_PAYMENT_REQUEST","REMOVE_PAYMENT_FAILURE","REMOVE_PAYMENT_SUCCESS","removeAllPaymentMethods","REMOVE_ALL_PAYMENT"],"mappings":"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","sourcesContent":["import * as req from '../actions/paymentActions';\nimport { sendRequest } from '../../helpers';\n\nconst clearLocalStorage = (props) => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n    if (shoppingapp[props]) {\n      delete shoppingapp[props];\n    }\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n};\n\nconst updateLocalStorage = (paymentMethods) => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n    if (paymentMethods?.length > 0) {\n      return localStorage.setItem(\n        'shoppingapp',\n        JSON.stringify({ ...shoppingapp, paymentMethods })\n      );\n    }\n    delete shoppingapp.paymentMethods;\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n  if (paymentMethods) {\n    localStorage.setItem('shoppingapp', JSON.stringify({ paymentMethods }));\n  }\n};\n\nexport const getPaymentMethods =\n  (userId, token) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: req.PAYMENT_METHODS_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/payment/users/${userId}`,\n        'GET',\n        { Authorization: `Bearer ${token}` }\n      );\n      if (error) {\n        return dispatch({ type: req.PAYMENT_METHODS_FAILURE, payload: error });\n      }\n      dispatch({ type: req.PAYMENT_METHODS_SUCCESS, payload: data });\n      updateLocalStorage(getState().payment.paymentMethods);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const savePaymentMethod =\n  (userId, token, paymentInfo, onSuccess) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: req.SAVE_PAYMENT_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/payment/users/${userId}/new`,\n        'POST',\n        {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        JSON.stringify(paymentInfo)\n      );\n      if (error) {\n        return dispatch({ type: req.SAVE_PAYMENT_FAILURE, payload: error });\n      }\n      dispatch({ type: req.SAVE_PAYMENT_SUCCESS, payload: data });\n      updateLocalStorage(getState().payment.paymentMethods);\n      onSuccess('saved');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const removePaymentMethod =\n  (userId, token, paymentId, onSuccess) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: req.REMOVE_PAYMENT_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/payment/${paymentId}/users/${userId}`,\n        'DELETE',\n        { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` }\n      );\n      if (error) {\n        return dispatch({ type: req.REMOVE_PAYMENT_FAILURE, payload: error });\n      }\n      dispatch({ type: req.REMOVE_PAYMENT_SUCCESS, payload: data });\n      updateLocalStorage(getState().payment.paymentMethods);\n      onSuccess('removed');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const removeAllPaymentMethods = () => (dispatch, getState) => {\n  dispatch({ type: req.REMOVE_ALL_PAYMENT });\n  clearLocalStorage('paymentMethods');\n};\n"]},"metadata":{},"sourceType":"module"}
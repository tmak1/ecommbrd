{"ast":null,"code":"import * as req from '../actions/shippingActions';\nimport { sendRequest } from '../../helpers';\n\nconst clearLocalStorage = props => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n\n    if (shoppingapp[props]) {\n      delete shoppingapp[props];\n    }\n\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n};\n\nconst updateLocalStorage = shippingAddresses => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n\n    if ((shippingAddresses === null || shippingAddresses === void 0 ? void 0 : shippingAddresses.length) > 0) {\n      return localStorage.setItem('shoppingapp', JSON.stringify({ ...shoppingapp,\n        shippingAddresses\n      }));\n    }\n\n    delete shoppingapp.shippingAddresses;\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n\n  if (shippingAddresses) {\n    localStorage.setItem('shoppingapp', JSON.stringify({\n      shippingAddresses\n    }));\n  }\n};\n\nexport const getShippingAddresses = (userId, token) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: req.SHIPPING_ADDRESSES_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/shipping/users/${userId}`, 'GET', {\n      Authorization: `Bearer ${token}`\n    });\n\n    if (error) {\n      return dispatch({\n        type: req.SHIPPING_ADDRESSES_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: req.SHIPPING_ADDRESSES_SUCCESS,\n      payload: data\n    });\n    updateLocalStorage(getState().shipping.shippingAddresses);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const saveShippingAddress = (userId, token, shippingInfo, onSuccess) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: req.SAVE_SHIPPING_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/shipping/users/${userId}/new`, 'POST', {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }, JSON.stringify(shippingInfo));\n\n    if (error) {\n      return dispatch({\n        type: req.SAVE_SHIPPING_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: req.SAVE_SHIPPING_SUCCESS,\n      payload: data\n    });\n    updateLocalStorage(getState().shipping.shippingAddresses);\n    onSuccess('saved');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateShippingAddress = (userId, token, shippingId, shippingInfo, onSuccess) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: req.EDIT_SHIPPING_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/shipping/${shippingId}/users/${userId}`, 'PATCH', {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }, JSON.stringify(shippingInfo));\n\n    if (error) {\n      return dispatch({\n        type: req.EDIT_SHIPPING_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: req.EDIT_SHIPPING_SUCCESS,\n      payload: data\n    });\n    updateLocalStorage(getState().shipping.shippingAddresses);\n    onSuccess('updated');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const removeShippingAddress = (userId, token, shippingId, onSuccess) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: req.REMOVE_SHIPPING_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/shipping/${shippingId}/users/${userId}`, 'DELETE', {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    });\n\n    if (error) {\n      return dispatch({\n        type: req.REMOVE_SHIPPING_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: req.REMOVE_SHIPPING_SUCCESS,\n      payload: data\n    });\n    updateLocalStorage(getState().shipping.shippingAddresses);\n    onSuccess('removed');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const removeAllShippingAddresses = () => (dispatch, getState) => {\n  dispatch({\n    type: req.REMOVE_ALL_SHIPPING\n  });\n  clearLocalStorage('shippingAddresses');\n};","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/server/client/src/redux/actionCreators/shippingActionCreators.js"],"names":["req","sendRequest","clearLocalStorage","props","shoppingapp","localStorage","getItem","JSON","parse","setItem","stringify","updateLocalStorage","shippingAddresses","length","getShippingAddresses","userId","token","dispatch","getState","type","SHIPPING_ADDRESSES_REQUEST","error","data","process","env","REACT_APP_API_URL","Authorization","SHIPPING_ADDRESSES_FAILURE","payload","SHIPPING_ADDRESSES_SUCCESS","shipping","console","log","saveShippingAddress","shippingInfo","onSuccess","SAVE_SHIPPING_REQUEST","SAVE_SHIPPING_FAILURE","SAVE_SHIPPING_SUCCESS","updateShippingAddress","shippingId","EDIT_SHIPPING_REQUEST","EDIT_SHIPPING_FAILURE","EDIT_SHIPPING_SUCCESS","removeShippingAddress","REMOVE_SHIPPING_REQUEST","REMOVE_SHIPPING_FAILURE","REMOVE_SHIPPING_SUCCESS","removeAllShippingAddresses","REMOVE_ALL_SHIPPING"],"mappings":"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","sourcesContent":["import * as req from '../actions/shippingActions';\nimport { sendRequest } from '../../helpers';\n\nconst clearLocalStorage = (props) => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n    if (shoppingapp[props]) {\n      delete shoppingapp[props];\n    }\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n};\n\nconst updateLocalStorage = (shippingAddresses) => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n    if (shippingAddresses?.length > 0) {\n      return localStorage.setItem(\n        'shoppingapp',\n        JSON.stringify({ ...shoppingapp, shippingAddresses })\n      );\n    }\n    delete shoppingapp.shippingAddresses;\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n  if (shippingAddresses) {\n    localStorage.setItem('shoppingapp', JSON.stringify({ shippingAddresses }));\n  }\n};\n\nexport const getShippingAddresses =\n  (userId, token) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: req.SHIPPING_ADDRESSES_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/shipping/users/${userId}`,\n        'GET',\n        { Authorization: `Bearer ${token}` }\n      );\n      if (error) {\n        return dispatch({\n          type: req.SHIPPING_ADDRESSES_FAILURE,\n          payload: error,\n        });\n      }\n      dispatch({ type: req.SHIPPING_ADDRESSES_SUCCESS, payload: data });\n      updateLocalStorage(getState().shipping.shippingAddresses);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const saveShippingAddress =\n  (userId, token, shippingInfo, onSuccess) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: req.SAVE_SHIPPING_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/shipping/users/${userId}/new`,\n        'POST',\n        {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        JSON.stringify(shippingInfo)\n      );\n      if (error) {\n        return dispatch({ type: req.SAVE_SHIPPING_FAILURE, payload: error });\n      }\n      dispatch({ type: req.SAVE_SHIPPING_SUCCESS, payload: data });\n      updateLocalStorage(getState().shipping.shippingAddresses);\n      onSuccess('saved');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const updateShippingAddress =\n  (userId, token, shippingId, shippingInfo, onSuccess) =>\n  async (dispatch, getState) => {\n    try {\n      dispatch({ type: req.EDIT_SHIPPING_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/shipping/${shippingId}/users/${userId}`,\n        'PATCH',\n        {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        JSON.stringify(shippingInfo)\n      );\n      if (error) {\n        return dispatch({ type: req.EDIT_SHIPPING_FAILURE, payload: error });\n      }\n      dispatch({ type: req.EDIT_SHIPPING_SUCCESS, payload: data });\n      updateLocalStorage(getState().shipping.shippingAddresses);\n      onSuccess('updated');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const removeShippingAddress =\n  (userId, token, shippingId, onSuccess) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: req.REMOVE_SHIPPING_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/shipping/${shippingId}/users/${userId}`,\n        'DELETE',\n        { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` }\n      );\n      if (error) {\n        return dispatch({ type: req.REMOVE_SHIPPING_FAILURE, payload: error });\n      }\n      dispatch({ type: req.REMOVE_SHIPPING_SUCCESS, payload: data });\n      updateLocalStorage(getState().shipping.shippingAddresses);\n      onSuccess('removed');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const removeAllShippingAddresses = () => (dispatch, getState) => {\n  dispatch({ type: req.REMOVE_ALL_SHIPPING });\n  clearLocalStorage('shippingAddresses');\n};\n"]},"metadata":{},"sourceType":"module"}
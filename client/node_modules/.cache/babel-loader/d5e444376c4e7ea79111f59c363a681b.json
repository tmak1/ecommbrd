{"ast":null,"code":"import { PRODUCT_REVIEW_REQUEST, PRODUCT_REVIEW_SUCCESS, PRODUCT_REVIEW_FAILURE, USER_REVIEW_REQUEST, USER_REVIEW_SUCCESS, USER_REVIEW_FAILURE, REVIEW_CREATE_REQUEST, REVIEW_CREATE_SUCCESS, REVIEW_CREATE_FAILURE, REVIEW_DELETE_REQUEST, REVIEW_DELETE_SUCCESS, REVIEW_DELETE_FAILURE } from '../actions/reviewActions';\nimport { sendRequest } from '../../helpers';\nexport const getAllProductReviews = productId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_REVIEW_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/reviews/products/${productId}`);\n    error ? dispatch({\n      type: PRODUCT_REVIEW_FAILURE,\n      payload: error\n    }) : dispatch({\n      type: PRODUCT_REVIEW_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAllUserReviews = userId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_REVIEW_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/reviews/users/${userId}`);\n    error ? dispatch({\n      type: USER_REVIEW_FAILURE,\n      payload: error\n    }) : dispatch({\n      type: USER_REVIEW_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createProductReview = (productId, token, createInfo, onSuccess = () => {}) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: REVIEW_CREATE_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/reviews/products/${productId}`, 'POST', {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }, JSON.stringify(createInfo));\n\n    if (error) {\n      return dispatch({\n        type: REVIEW_CREATE_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: REVIEW_CREATE_SUCCESS,\n      payload: data\n    });\n    onSuccess();\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteProductReview = (reviewId, token, onSuccess) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: REVIEW_DELETE_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/reviews/${reviewId}`, 'DELETE', {\n      Authorization: `Bearer ${token}`\n    });\n\n    if (error) {\n      return dispatch({\n        type: REVIEW_DELETE_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: REVIEW_DELETE_SUCCESS,\n      payload: data\n    });\n    onSuccess();\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/projects/ecommbrd/client/src/redux/actionCreators/reviewActionCreators.js"],"names":["PRODUCT_REVIEW_REQUEST","PRODUCT_REVIEW_SUCCESS","PRODUCT_REVIEW_FAILURE","USER_REVIEW_REQUEST","USER_REVIEW_SUCCESS","USER_REVIEW_FAILURE","REVIEW_CREATE_REQUEST","REVIEW_CREATE_SUCCESS","REVIEW_CREATE_FAILURE","REVIEW_DELETE_REQUEST","REVIEW_DELETE_SUCCESS","REVIEW_DELETE_FAILURE","sendRequest","getAllProductReviews","productId","dispatch","getState","type","error","data","process","env","REACT_APP_API_URL","payload","console","log","getAllUserReviews","userId","createProductReview","token","createInfo","onSuccess","Authorization","JSON","stringify","deleteProductReview","reviewId"],"mappings":"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","sourcesContent":["import {\n  PRODUCT_REVIEW_REQUEST,\n  PRODUCT_REVIEW_SUCCESS,\n  PRODUCT_REVIEW_FAILURE,\n  USER_REVIEW_REQUEST,\n  USER_REVIEW_SUCCESS,\n  USER_REVIEW_FAILURE,\n  REVIEW_CREATE_REQUEST,\n  REVIEW_CREATE_SUCCESS,\n  REVIEW_CREATE_FAILURE,\n  REVIEW_DELETE_REQUEST,\n  REVIEW_DELETE_SUCCESS,\n  REVIEW_DELETE_FAILURE,\n} from '../actions/reviewActions';\n\nimport { sendRequest } from '../../helpers';\n\nexport const getAllProductReviews =\n  (productId) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: PRODUCT_REVIEW_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/reviews/products/${productId}`\n      );\n      error\n        ? dispatch({ type: PRODUCT_REVIEW_FAILURE, payload: error })\n        : dispatch({ type: PRODUCT_REVIEW_SUCCESS, payload: data });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const getAllUserReviews = (userId) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: USER_REVIEW_REQUEST });\n    const { error, data } = await sendRequest(\n      `${process.env.REACT_APP_API_URL}/reviews/users/${userId}`\n    );\n    error\n      ? dispatch({ type: USER_REVIEW_FAILURE, payload: error })\n      : dispatch({ type: USER_REVIEW_SUCCESS, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const createProductReview =\n  (productId, token, createInfo, onSuccess = () => {}) =>\n  async (dispatch, getState) => {\n    try {\n      dispatch({ type: REVIEW_CREATE_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/reviews/products/${productId}`,\n        'POST',\n        {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        JSON.stringify(createInfo)\n      );\n      if (error) {\n        return dispatch({\n          type: REVIEW_CREATE_FAILURE,\n          payload: error,\n        });\n      }\n      dispatch({ type: REVIEW_CREATE_SUCCESS, payload: data });\n      onSuccess();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const deleteProductReview =\n  (reviewId, token, onSuccess) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: REVIEW_DELETE_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/reviews/${reviewId}`,\n        'DELETE',\n        {\n          Authorization: `Bearer ${token}`,\n        }\n      );\n      if (error) {\n        return dispatch({ type: REVIEW_DELETE_FAILURE, payload: error });\n      }\n      dispatch({ type: REVIEW_DELETE_SUCCESS, payload: data });\n      onSuccess();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}
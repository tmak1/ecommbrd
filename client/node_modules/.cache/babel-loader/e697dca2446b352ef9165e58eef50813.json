{"ast":null,"code":"import { PLACE_ORDER_FAILURE, PLACE_ORDER_SUCCESS, PLACE_ORDER_REQUEST, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAILURE, ORDER_LIST_REQUEST, ORDER_LIST_SUCCESS, ORDER_LIST_FAILURE, USER_ORDER_LIST_REQUEST, USER_ORDER_LIST_SUCCESS, USER_ORDER_LIST_FAILURE, PRODUCT_ORDER_LIST_REQUEST, PRODUCT_ORDER_LIST_SUCCESS, PRODUCT_ORDER_LIST_FAILURE, PRODUCT_ORDER_BY_USER_REQUEST, PRODUCT_ORDER_BY_USER_SUCCESS, PRODUCT_ORDER_BY_USER_FAILURE, UPDATE_ORDER_ISDELIVERED_REQUEST, UPDATE_ORDER_ISDELIVERED_SUCCESS, UPDATE_ORDER_ISDELIVERED_FAILURE } from '../actions/orderActions';\nimport { sendRequest } from '../../helpers';\n\nconst updateLocalStorage = (item, key) => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n\n    if ((item === null || item === void 0 ? void 0 : item.length) > 0) {\n      return localStorage.setItem('shoppingapp', JSON.stringify({ ...shoppingapp,\n        [key]: item\n      }));\n    }\n\n    delete shoppingapp[key];\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n\n  if (item) {\n    localStorage.setItem('shoppingapp', JSON.stringify({\n      [key]: item\n    }));\n  }\n};\n\nexport const placeOrder = ({\n  shippingAddressId,\n  paymentMethodId,\n  orderItems,\n  paymentResult,\n  token,\n  tax,\n  shippingCost,\n  total,\n  subTotal,\n  isPaid,\n  paidAt,\n  isDelivered,\n  deliveredAt,\n  onSuccess\n}) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PLACE_ORDER_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/orders/new`, 'POST', {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }, JSON.stringify({\n      shippingAddressId,\n      paymentMethodId,\n      paymentResult,\n      orderItems,\n      tax,\n      shippingCost,\n      total,\n      subTotal,\n      isPaid,\n      paidAt,\n      isDelivered,\n      deliveredAt\n    }));\n\n    if (error) {\n      dispatch({\n        type: PLACE_ORDER_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: PLACE_ORDER_SUCCESS,\n      payload: {\n        msg: 'success',\n        id: data === null || data === void 0 ? void 0 : data.id\n      }\n    });\n    onSuccess(getState().orderCreated.order.id); //updateLocalStorage(getState().checkout.placeOrder, 'order');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getOrderDetails = (orderId, token) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/orders/${orderId}`, 'GET', {\n      Authorization: `Bearer ${token}`\n    });\n\n    if (error) {\n      dispatch({\n        type: ORDER_DETAILS_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    }); //updateLocalStorage(getState().checkout.placeOrder, 'order');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getOrderList = token => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_LIST_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/orders`, 'GET', {\n      Authorization: `Bearer ${token}`\n    });\n\n    if (error) {\n      dispatch({\n        type: ORDER_LIST_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: ORDER_LIST_SUCCESS,\n      payload: data\n    }); //updateLocalStorage(getState().checkout.placeOrder, 'order');\n\n    updateLocalStorage(getState().orderList.orders, 'order');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getOrderListByUser = (userId, token, searchTerm = '', page = '', perPage = '') => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_ORDER_LIST_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/orders/users/${userId}?orderId=${searchTerm}&page=${page}&perPage=${perPage}`, 'GET', {\n      Authorization: `Bearer ${token}`\n    });\n\n    if (error) {\n      dispatch({\n        type: USER_ORDER_LIST_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: USER_ORDER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getOrderListByProduct = (productId, token, searchTerm = '', page = '', perPage = '') => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_ORDER_LIST_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/orders/products/${productId}?orderId=${searchTerm}&page=${page}&perPage=${perPage}`, 'GET', {\n      Authorization: `Bearer ${token}`\n    });\n\n    if (error) {\n      dispatch({\n        type: PRODUCT_ORDER_LIST_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: PRODUCT_ORDER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getProductOrderByUser = (productId, token) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_ORDER_BY_USER_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/orders/products/${productId}`, 'GET', {\n      Authorization: `Bearer ${token}`\n    });\n\n    if (error) {\n      dispatch({\n        type: PRODUCT_ORDER_BY_USER_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: PRODUCT_ORDER_BY_USER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateOrderIsDelivered = (orderId, token, updateInfo, onSuccess = () => {}) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: UPDATE_ORDER_ISDELIVERED_REQUEST\n    });\n    const {\n      error,\n      data\n    } = await sendRequest(`${process.env.REACT_APP_API_URL}/orders/${orderId}`, 'PATCH', {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }, JSON.stringify(updateInfo));\n\n    if (error) {\n      dispatch({\n        type: UPDATE_ORDER_ISDELIVERED_FAILURE,\n        payload: error\n      });\n    }\n\n    dispatch({\n      type: UPDATE_ORDER_ISDELIVERED_SUCCESS,\n      payload: data\n    });\n    onSuccess();\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/projects/ecommbrd/client/src/redux/actionCreators/orderActionCreators.js"],"names":["PLACE_ORDER_FAILURE","PLACE_ORDER_SUCCESS","PLACE_ORDER_REQUEST","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAILURE","ORDER_LIST_REQUEST","ORDER_LIST_SUCCESS","ORDER_LIST_FAILURE","USER_ORDER_LIST_REQUEST","USER_ORDER_LIST_SUCCESS","USER_ORDER_LIST_FAILURE","PRODUCT_ORDER_LIST_REQUEST","PRODUCT_ORDER_LIST_SUCCESS","PRODUCT_ORDER_LIST_FAILURE","PRODUCT_ORDER_BY_USER_REQUEST","PRODUCT_ORDER_BY_USER_SUCCESS","PRODUCT_ORDER_BY_USER_FAILURE","UPDATE_ORDER_ISDELIVERED_REQUEST","UPDATE_ORDER_ISDELIVERED_SUCCESS","UPDATE_ORDER_ISDELIVERED_FAILURE","sendRequest","updateLocalStorage","item","key","shoppingapp","localStorage","getItem","JSON","parse","length","setItem","stringify","placeOrder","shippingAddressId","paymentMethodId","orderItems","paymentResult","token","tax","shippingCost","total","subTotal","isPaid","paidAt","isDelivered","deliveredAt","onSuccess","dispatch","getState","type","error","data","process","env","REACT_APP_API_URL","Authorization","payload","msg","id","orderCreated","order","console","log","getOrderDetails","orderId","getOrderList","orderList","orders","getOrderListByUser","userId","searchTerm","page","perPage","getOrderListByProduct","productId","getProductOrderByUser","updateOrderIsDelivered","updateInfo"],"mappings":"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","sourcesContent":["import {\n  PLACE_ORDER_FAILURE,\n  PLACE_ORDER_SUCCESS,\n  PLACE_ORDER_REQUEST,\n  ORDER_DETAILS_REQUEST,\n  ORDER_DETAILS_SUCCESS,\n  ORDER_DETAILS_FAILURE,\n  ORDER_LIST_REQUEST,\n  ORDER_LIST_SUCCESS,\n  ORDER_LIST_FAILURE,\n  USER_ORDER_LIST_REQUEST,\n  USER_ORDER_LIST_SUCCESS,\n  USER_ORDER_LIST_FAILURE,\n  PRODUCT_ORDER_LIST_REQUEST,\n  PRODUCT_ORDER_LIST_SUCCESS,\n  PRODUCT_ORDER_LIST_FAILURE,\n  PRODUCT_ORDER_BY_USER_REQUEST,\n  PRODUCT_ORDER_BY_USER_SUCCESS,\n  PRODUCT_ORDER_BY_USER_FAILURE,\n  UPDATE_ORDER_ISDELIVERED_REQUEST,\n  UPDATE_ORDER_ISDELIVERED_SUCCESS,\n  UPDATE_ORDER_ISDELIVERED_FAILURE,\n} from '../actions/orderActions';\nimport { sendRequest } from '../../helpers';\n\nconst updateLocalStorage = (item, key) => {\n  let shoppingapp = localStorage.getItem('shoppingapp');\n  if (shoppingapp) {\n    shoppingapp = JSON.parse(shoppingapp);\n    if (item?.length > 0) {\n      return localStorage.setItem(\n        'shoppingapp',\n        JSON.stringify({ ...shoppingapp, [key]: item })\n      );\n    }\n    delete shoppingapp[key];\n    return localStorage.setItem('shoppingapp', JSON.stringify(shoppingapp));\n  }\n  if (item) {\n    localStorage.setItem('shoppingapp', JSON.stringify({ [key]: item }));\n  }\n};\n\nexport const placeOrder =\n  ({\n    shippingAddressId,\n    paymentMethodId,\n    orderItems,\n    paymentResult,\n    token,\n    tax,\n    shippingCost,\n    total,\n    subTotal,\n    isPaid,\n    paidAt,\n    isDelivered,\n    deliveredAt,\n    onSuccess,\n  }) =>\n  async (dispatch, getState) => {\n    try {\n      dispatch({ type: PLACE_ORDER_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/orders/new`,\n        'POST',\n        {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        JSON.stringify({\n          shippingAddressId,\n          paymentMethodId,\n          paymentResult,\n          orderItems,\n          tax,\n          shippingCost,\n          total,\n          subTotal,\n          isPaid,\n          paidAt,\n          isDelivered,\n          deliveredAt,\n        })\n      );\n      if (error) {\n        dispatch({ type: PLACE_ORDER_FAILURE, payload: error });\n      }\n      dispatch({\n        type: PLACE_ORDER_SUCCESS,\n        payload: { msg: 'success', id: data?.id },\n      });\n      onSuccess(getState().orderCreated.order.id);\n      //updateLocalStorage(getState().checkout.placeOrder, 'order');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const getOrderDetails =\n  (orderId, token) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: ORDER_DETAILS_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/orders/${orderId}`,\n        'GET',\n        {\n          Authorization: `Bearer ${token}`,\n        }\n      );\n      if (error) {\n        dispatch({ type: ORDER_DETAILS_FAILURE, payload: error });\n      }\n      dispatch({ type: ORDER_DETAILS_SUCCESS, payload: data });\n      //updateLocalStorage(getState().checkout.placeOrder, 'order');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const getOrderList = (token) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: ORDER_LIST_REQUEST });\n    const { error, data } = await sendRequest(\n      `${process.env.REACT_APP_API_URL}/orders`,\n      'GET',\n      {\n        Authorization: `Bearer ${token}`,\n      }\n    );\n    if (error) {\n      dispatch({ type: ORDER_LIST_FAILURE, payload: error });\n    }\n    dispatch({ type: ORDER_LIST_SUCCESS, payload: data });\n    //updateLocalStorage(getState().checkout.placeOrder, 'order');\n    updateLocalStorage(getState().orderList.orders, 'order');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getOrderListByUser =\n  (userId, token, searchTerm = '', page = '', perPage = '') =>\n  async (dispatch, getState) => {\n    try {\n      dispatch({ type: USER_ORDER_LIST_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/orders/users/${userId}?orderId=${searchTerm}&page=${page}&perPage=${perPage}`,\n        'GET',\n        {\n          Authorization: `Bearer ${token}`,\n        }\n      );\n      if (error) {\n        dispatch({ type: USER_ORDER_LIST_FAILURE, payload: error });\n      }\n      dispatch({ type: USER_ORDER_LIST_SUCCESS, payload: data });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const getOrderListByProduct =\n  (productId, token, searchTerm = '', page = '', perPage = '') =>\n  async (dispatch, getState) => {\n    try {\n      dispatch({ type: PRODUCT_ORDER_LIST_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/orders/products/${productId}?orderId=${searchTerm}&page=${page}&perPage=${perPage}`,\n        'GET',\n        {\n          Authorization: `Bearer ${token}`,\n        }\n      );\n      if (error) {\n        dispatch({ type: PRODUCT_ORDER_LIST_FAILURE, payload: error });\n      }\n      dispatch({ type: PRODUCT_ORDER_LIST_SUCCESS, payload: data });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const getProductOrderByUser =\n  (productId, token) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: PRODUCT_ORDER_BY_USER_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/orders/products/${productId}`,\n        'GET',\n        {\n          Authorization: `Bearer ${token}`,\n        }\n      );\n      if (error) {\n        dispatch({ type: PRODUCT_ORDER_BY_USER_FAILURE, payload: error });\n      }\n      dispatch({ type: PRODUCT_ORDER_BY_USER_SUCCESS, payload: data });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\nexport const updateOrderIsDelivered =\n  (orderId, token, updateInfo, onSuccess = () => {}) =>\n  async (dispatch, getState) => {\n    try {\n      dispatch({ type: UPDATE_ORDER_ISDELIVERED_REQUEST });\n      const { error, data } = await sendRequest(\n        `${process.env.REACT_APP_API_URL}/orders/${orderId}`,\n        'PATCH',\n        {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        JSON.stringify(updateInfo)\n      );\n      if (error) {\n        dispatch({ type: UPDATE_ORDER_ISDELIVERED_FAILURE, payload: error });\n      }\n      dispatch({ type: UPDATE_ORDER_ISDELIVERED_SUCCESS, payload: data });\n      onSuccess();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}
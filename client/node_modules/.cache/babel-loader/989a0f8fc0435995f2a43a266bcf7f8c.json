{"ast":null,"code":"import _slicedToArray from\"/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import React,{useState,useEffect}from'react';import categories from'../../../categories';import{makeStyles,withStyles}from'@material-ui/core/styles';import TreeView from'@material-ui/lab/TreeView';import ExpandMoreIcon from'@material-ui/icons/ExpandMore';import ChevronRightIcon from'@material-ui/icons/ChevronRight';import TreeItem from'@material-ui/lab/TreeItem';import Checkbox from'@material-ui/core/Checkbox';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var useStyles=makeStyles(function(theme){return{root:{height:240,flexGrow:1,maxWidth:400,'&$checked':{color:'rgba(0,0,0,1.0)'},checked:{}},itemDiv:_defineProperty({display:'flex',alignItems:'center','& > *':{marginLeft:0}},theme.breakpoints.down('lg'),{display:'flex',flexDirection:'row'})};});var CheckboxComp=withStyles({root:{'&$checked':{color:'#000'}},checked:{}})(function(props){return/*#__PURE__*/_jsx(Checkbox,_objectSpread({color:\"default\"},props));});var getCategories=function getCategories(){return categories.reduce(function(acc,curr){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},curr,false));},{});};var FilterTree=function FilterTree(_ref){var reset=_ref.reset,setFilters=_ref.setFilters;var classes=useStyles();var _useState=useState(getCategories()),_useState2=_slicedToArray(_useState,2),checked=_useState2[0],setChecked=_useState2[1];var handleChange=function handleChange(event){setChecked(_objectSpread(_objectSpread({},checked),{},_defineProperty({},event.target.name,event.target.checked)));};useEffect(function(){var filterCategories=Object.entries(checked).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),key=_ref3[0],val=_ref3[1];return val?key:null;}).filter(function(category){return category!==null;});setFilters(filterCategories);},[checked,setFilters]);useEffect(function(){if(reset){setChecked(getCategories);}},[reset]);return/*#__PURE__*/_jsx(TreeView,{className:classes.root,defaultCollapseIcon:/*#__PURE__*/_jsx(ExpandMoreIcon,{}),defaultExpandIcon:/*#__PURE__*/_jsx(ChevronRightIcon,{}),defaultExpanded:['1'],children:/*#__PURE__*/_jsx(TreeItem,{nodeId:\"1\",label:\"Category\",children:categories.map(function(category,index){return/*#__PURE__*/_jsxs(\"div\",{className:classes.itemDiv,children:[/*#__PURE__*/_jsx(CheckboxComp,{checked:checked[category],name:category,onChange:handleChange}),/*#__PURE__*/_jsx(TreeItem,{nodeId:String(index+2),label:category})]},index);})})});};export default FilterTree;","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/client/src/components/shared/ui/FilterTree.js"],"names":["React","useState","useEffect","categories","makeStyles","withStyles","TreeView","ExpandMoreIcon","ChevronRightIcon","TreeItem","Checkbox","useStyles","theme","root","height","flexGrow","maxWidth","color","checked","itemDiv","display","alignItems","marginLeft","breakpoints","down","flexDirection","CheckboxComp","props","getCategories","reduce","acc","curr","FilterTree","reset","setFilters","classes","setChecked","handleChange","event","target","name","filterCategories","Object","entries","map","key","val","filter","category","index","String"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport categories from '../../../categories';\n\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: 240,\n    flexGrow: 1,\n    maxWidth: 400,\n    '&$checked': {\n      color: 'rgba(0,0,0,1.0)',\n    },\n    checked: {},\n  },\n  itemDiv: {\n    display: 'flex',\n    alignItems: 'center',\n    '& > *': { marginLeft: 0 },\n    [theme.breakpoints.down('lg')]: {\n      display: 'flex',\n      flexDirection: 'row',\n    },\n  },\n}));\n\nconst CheckboxComp = withStyles({\n  root: {\n    '&$checked': {\n      color: '#000',\n    },\n  },\n  checked: {},\n})((props) => <Checkbox color=\"default\" {...props} />);\n\nconst getCategories = () =>\n  categories.reduce((acc, curr) => {\n    return { ...acc, [curr]: false };\n  }, {});\n\nconst FilterTree = ({ reset, setFilters }) => {\n  const classes = useStyles();\n  const [checked, setChecked] = useState(getCategories());\n  const handleChange = (event) => {\n    setChecked({ ...checked, [event.target.name]: event.target.checked });\n  };\n  useEffect(() => {\n    const filterCategories = Object.entries(checked)\n      .map(([key, val]) => (val ? key : null))\n      .filter((category) => category !== null);\n    setFilters(filterCategories);\n  }, [checked, setFilters]);\n\n  useEffect(() => {\n    if (reset) {\n      setChecked(getCategories);\n    }\n  }, [reset]);\n\n  return (\n    <TreeView\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n      defaultExpanded={['1']}\n    >\n      <TreeItem nodeId=\"1\" label=\"Category\">\n        {categories.map((category, index) => (\n          <div key={index} className={classes.itemDiv}>\n            <CheckboxComp\n              checked={checked[category]}\n              name={category}\n              onChange={handleChange}\n            />\n            <TreeItem nodeId={String(index + 2)} label={category} />\n          </div>\n        ))}\n      </TreeItem>\n    </TreeView>\n  );\n};\n\nexport default FilterTree;\n"]},"metadata":{},"sourceType":"module"}
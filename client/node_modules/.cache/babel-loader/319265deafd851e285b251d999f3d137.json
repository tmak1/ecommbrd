{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport jwt_decode from 'jwt-decode';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { initialState, rootReducer } from './reducers/rootReducer';\nimport { logoutUser } from './actionCreators/userActionCreators';\nlet logoutTimer;\n\nconst checkTokenExpirationMiddleware = store => next => action => {\n  let token;\n  let shoppingapp = localStorage.getItem('shoppingapp') ? JSON.parse(localStorage.getItem('shoppingapp')) : null;\n\n  if (shoppingapp) {\n    var _shoppingapp$loggedIn;\n\n    token = (_shoppingapp$loggedIn = shoppingapp.loggedInUser) === null || _shoppingapp$loggedIn === void 0 ? void 0 : _shoppingapp$loggedIn.token;\n\n    if (token) {\n      if (jwt_decode(token).exp * 1000 >= Date.now()) {\n        const timeLeft = jwt_decode(token).exp * 1000 - Date.now();\n        logoutTimer = setTimeout(() => {\n          localStorage.clear();\n          store.dispatch(logoutUser());\n        }, timeLeft);\n      } else {\n        localStorage.clear();\n        store.dispatch(logoutUser());\n      }\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }\n\n  next(action);\n};\n\nconst middlewares = [thunk, checkTokenExpirationMiddleware];\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middlewares)));\nexport default store;","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/client/src/redux/store.js"],"names":["createStore","applyMiddleware","thunk","jwt_decode","composeWithDevTools","initialState","rootReducer","logoutUser","logoutTimer","checkTokenExpirationMiddleware","store","next","action","token","shoppingapp","localStorage","getItem","JSON","parse","loggedInUser","exp","Date","now","timeLeft","setTimeout","clear","dispatch","clearTimeout","middlewares"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,wBAA1C;AACA,SAASC,UAAT,QAA2B,qCAA3B;AAEA,IAAIC,WAAJ;;AAEA,MAAMC,8BAA8B,GAAIC,KAAD,IAAYC,IAAD,IAAWC,MAAD,IAAY;AACtE,MAAIC,KAAJ;AACA,MAAIC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,IACdC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CADc,GAEd,IAFJ;;AAIA,MAAIF,WAAJ,EAAiB;AAAA;;AACfD,IAAAA,KAAK,4BAAGC,WAAW,CAACK,YAAf,0DAAG,sBAA0BN,KAAlC;;AACA,QAAIA,KAAJ,EAAW;AACT,UAAIV,UAAU,CAACU,KAAD,CAAV,CAAkBO,GAAlB,GAAwB,IAAxB,IAAgCC,IAAI,CAACC,GAAL,EAApC,EAAgD;AAC9C,cAAMC,QAAQ,GAAGpB,UAAU,CAACU,KAAD,CAAV,CAAkBO,GAAlB,GAAwB,IAAxB,GAA+BC,IAAI,CAACC,GAAL,EAAhD;AAEAd,QAAAA,WAAW,GAAGgB,UAAU,CAAC,MAAM;AAC7BT,UAAAA,YAAY,CAACU,KAAb;AACAf,UAAAA,KAAK,CAACgB,QAAN,CAAenB,UAAU,EAAzB;AACD,SAHuB,EAGrBgB,QAHqB,CAAxB;AAID,OAPD,MAOO;AACLR,QAAAA,YAAY,CAACU,KAAb;AACAf,QAAAA,KAAK,CAACgB,QAAN,CAAenB,UAAU,EAAzB;AACD;AACF,KAZD,MAYO;AACLoB,MAAAA,YAAY,CAACnB,WAAD,CAAZ;AACD;AACF;;AACDG,EAAAA,IAAI,CAACC,MAAD,CAAJ;AACD,CAzBD;;AA2BA,MAAMgB,WAAW,GAAG,CAAC1B,KAAD,EAAQO,8BAAR,CAApB;AAEA,MAAMC,KAAK,GAAGV,WAAW,CACvBM,WADuB,EAEvBD,YAFuB,EAGvBD,mBAAmB,CAACH,eAAe,CAAC,GAAG2B,WAAJ,CAAhB,CAHI,CAAzB;AAMA,eAAelB,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport jwt_decode from 'jwt-decode';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { initialState, rootReducer } from './reducers/rootReducer';\nimport { logoutUser } from './actionCreators/userActionCreators';\n\nlet logoutTimer;\n\nconst checkTokenExpirationMiddleware = (store) => (next) => (action) => {\n  let token;\n  let shoppingapp = localStorage.getItem('shoppingapp')\n    ? JSON.parse(localStorage.getItem('shoppingapp'))\n    : null;\n\n  if (shoppingapp) {\n    token = shoppingapp.loggedInUser?.token;\n    if (token) {\n      if (jwt_decode(token).exp * 1000 >= Date.now()) {\n        const timeLeft = jwt_decode(token).exp * 1000 - Date.now();\n\n        logoutTimer = setTimeout(() => {\n          localStorage.clear();\n          store.dispatch(logoutUser());\n        }, timeLeft);\n      } else {\n        localStorage.clear();\n        store.dispatch(logoutUser());\n      }\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }\n  next(action);\n};\n\nconst middlewares = [thunk, checkTokenExpirationMiddleware];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middlewares))\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}
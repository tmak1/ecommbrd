{"ast":null,"code":"var _jsxFileName = \"/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/server/client/src/components/products/pages/UserReviews.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ReviewList from '../components/ReviewList';\nimport PageHeading from '../../shared/ui/PageHeading';\nimport AlertMessage from '../../shared/ui/AlertMessage';\nimport { getAllUserReviews } from '../../../redux/actionCreators/reviewActionCreators';\nimport SkeletonReviews from '../../shared/ui/skeletons/SkeletonReviews';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Reviews = ({\n  userId\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const userIdFromUrl = useParams().uid;\n  const {\n    loggedInUser\n  } = useSelector(state => state.userAuth);\n  const {\n    loading,\n    error,\n    reviews\n  } = useSelector(state => state.userReviews || {});\n\n  const refreshReviews = () => {\n    dispatch(getAllUserReviews(userId || userIdFromUrl));\n  };\n\n  useEffect(() => {\n    dispatch(getAllUserReviews(userId || userIdFromUrl));\n  }, [userId, userIdFromUrl, dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [loading && /*#__PURE__*/_jsxDEV(SkeletonReviews, {\n        userreviews: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(AlertMessage, {\n        message: error,\n        severity: \"error\",\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), !loading && !error ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(PageHeading, {\n          size: \"medium\",\n          text: \"Reviews\",\n          gutterBottom: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), (reviews === null || reviews === void 0 ? void 0 : reviews.length) > 0 ? /*#__PURE__*/_jsxDEV(ReviewList, {\n          reviews: reviews,\n          loggedInUser: loggedInUser,\n          userReview: true,\n          refreshReviews: refreshReviews\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"No reviews yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Reviews, \"VN2og66vby3eOg8M0zJMhJQd+SU=\", false, function () {\n  return [useDispatch, useParams, useSelector, useSelector];\n});\n\n_c = Reviews;\nexport default Reviews;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reviews\");","map":{"version":3,"sources":["/Users/tmak/Desktop/tei/udemy/brdtrv/ecomm/server/client/src/components/products/pages/UserReviews.js"],"names":["React","useEffect","useParams","useDispatch","useSelector","ReviewList","PageHeading","AlertMessage","getAllUserReviews","SkeletonReviews","Reviews","userId","dispatch","userIdFromUrl","uid","loggedInUser","state","userAuth","loading","error","reviews","userReviews","refreshReviews","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,SAASC,iBAAT,QAAkC,oDAAlC;AACA,OAAOC,eAAP,MAA4B,2CAA5B;;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAAA;;AAC9B,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,aAAa,GAAGX,SAAS,GAAGY,GAAlC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAmBX,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACC,QAAlB,CAApC;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA8BhB,WAAW,CAC5CY,KAAD,IAAWA,KAAK,CAACK,WAAN,IAAqB,EADa,CAA/C;;AAGA,QAAMC,cAAc,GAAG,MAAM;AAC3BV,IAAAA,QAAQ,CAACJ,iBAAiB,CAACG,MAAM,IAAIE,aAAX,CAAlB,CAAR;AACD,GAFD;;AAIAZ,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAACJ,iBAAiB,CAACG,MAAM,IAAIE,aAAX,CAAlB,CAAR;AACD,GAFQ,EAEN,CAACF,MAAD,EAASE,aAAT,EAAwBD,QAAxB,CAFM,CAAT;AAIA,sBACE;AAAA,2BACE;AAAA,iBACGM,OAAO,iBAAI,QAAC,eAAD;AAAiB,QAAA,WAAW,EAAE;AAA9B;AAAA;AAAA;AAAA;AAAA,cADd,EAEGC,KAAK,iBACJ,QAAC,YAAD;AAAc,QAAA,OAAO,EAAEA,KAAvB;AAA8B,QAAA,QAAQ,EAAC,OAAvC;AAA+C,QAAA,OAAO,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,cAHJ,EAKG,CAACD,OAAD,IAAY,CAACC,KAAb,gBACC;AAAA,gCACE,QAAC,WAAD;AAAa,UAAA,IAAI,EAAC,QAAlB;AAA2B,UAAA,IAAI,EAAC,SAAhC;AAA0C,UAAA,YAAY;AAAtD;AAAA;AAAA;AAAA;AAAA,gBADF,EAEG,CAAAC,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEG,MAAT,IAAkB,CAAlB,gBACC,QAAC,UAAD;AACE,UAAA,OAAO,EAAEH,OADX;AAEE,UAAA,YAAY,EAAEL,YAFhB;AAGE,UAAA,UAAU,EAAE,IAHd;AAIE,UAAA,cAAc,EAAEO;AAJlB;AAAA;AAAA;AAAA;AAAA,gBADD,gBAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ;AAAA,sBADD,GAcG,IAnBN;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAyBD,CAxCD;;GAAMZ,O;UACaP,W,EACKD,S,EACGE,W,EACWA,W;;;KAJhCM,O;AA0CN,eAAeA,OAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ReviewList from '../components/ReviewList';\nimport PageHeading from '../../shared/ui/PageHeading';\nimport AlertMessage from '../../shared/ui/AlertMessage';\n\nimport { getAllUserReviews } from '../../../redux/actionCreators/reviewActionCreators';\nimport SkeletonReviews from '../../shared/ui/skeletons/SkeletonReviews';\n\nconst Reviews = ({ userId }) => {\n  const dispatch = useDispatch();\n  const userIdFromUrl = useParams().uid;\n  const { loggedInUser } = useSelector((state) => state.userAuth);\n  const { loading, error, reviews } = useSelector(\n    (state) => state.userReviews || {}\n  );\n  const refreshReviews = () => {\n    dispatch(getAllUserReviews(userId || userIdFromUrl));\n  };\n\n  useEffect(() => {\n    dispatch(getAllUserReviews(userId || userIdFromUrl));\n  }, [userId, userIdFromUrl, dispatch]);\n\n  return (\n    <>\n      <div>\n        {loading && <SkeletonReviews userreviews={true} />}\n        {error && (\n          <AlertMessage message={error} severity=\"error\" variant=\"outlined\" />\n        )}\n        {!loading && !error ? (\n          <>\n            <PageHeading size=\"medium\" text=\"Reviews\" gutterBottom />\n            {reviews?.length > 0 ? (\n              <ReviewList\n                reviews={reviews}\n                loggedInUser={loggedInUser}\n                userReview={true}\n                refreshReviews={refreshReviews}\n              />\n            ) : (\n              <div>No reviews yet</div>\n            )}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n};\n\nexport default Reviews;\n"]},"metadata":{},"sourceType":"module"}